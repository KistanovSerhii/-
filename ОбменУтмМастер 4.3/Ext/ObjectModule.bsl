Функция СведенияОВнешнейОбработке() Экспорт
	
	РегистрационныеДанные = Новый Структура;
	РегистрационныеДанные.Вставить("Наименование", "Обмен с УТМ");
	РегистрационныеДанные.Вставить("БезопасныйРежим", Ложь);
	РегистрационныеДанные.Вставить("Версия", "1.0");
	РегистрационныеДанные.Вставить("Вид", "ДополнительнаяОбработка");
	РегистрационныеДанные.Вставить("Информация", "Обмен с УТМ");
	///////////// команды /////////////////////////
	тзКоманд = Новый ТаблицаЗначений;
	тзКоманд.Колонки.Добавить("Идентификатор");
	тзКоманд.Колонки.Добавить("Представление");
	тзКоманд.Колонки.Добавить("Модификатор");
	тзКоманд.Колонки.Добавить("ПоказыватьОповещение");
	тзКоманд.Колонки.Добавить("Использование");
	
	строкаКоманды = тзКоманд.Добавить();
	строкаКоманды.Идентификатор = "1";
	строкаКоманды.Представление = "Обмен с УТМ";
	строкаКоманды.ПоказыватьОповещение = Истина;
	строкаКоманды.Использование = "ОткрытиеФормы";
	
	РегистрационныеДанные.Вставить("Команды", тзКоманд);
	Возврат РегистрационныеДанные;
	
КонецФункции

Процедура ЗагрузитьСправочникиОрганизации(ФайлАдрес) Экспорт
	ИмяФайла = ПолучитьФайл(ФайлАдрес);
	Данные = ПрочитатьXDTO(ИмяФайла);
	ЗаполнитьСправочникОрагинизации(Данные);	
КонецПроцедуры

Процедура ЗаполнитьСправочникОрагинизации(Данные)
	Если Не ТипЗнч(Данные.Client) = Тип("СписокXDTO") Тогда
		ЗагружаемыйСправочник = Новый Массив;
		ЗагружаемыйСправочник.Добавить(Данные.Client);
	Иначе	
		ЗагружаемыйСправочник = Данные.Client;
	КонецЕсли;
	
	Для Каждого Организация Из ЗагружаемыйСправочник Цикл
		ЗаполнитьОрганизацию(Организация);	
	КонецЦикла;  
КонецПроцедуры 

Функция ЗаполнитьОрганизацию(Организация)
	НайденнаяСсылка = Справочники.КлассификаторОрганизацийЕГАИС.НайтиПоКоду(Организация.ClientRegId);
	Если НайденнаяСсылка = Справочники.КлассификаторОрганизацийЕГАИС.ПустаяСсылка() Тогда
		ТекЭлемент = Справочники.КлассификаторОрганизацийЕГАИС.СоздатьЭлемент();
	Иначе
		ТекЭлемент = НайденнаяСсылка.ПолучитьОбъект();
	КонецЕсли;	
	ТекЭлемент.Код = Организация.ClientRegId;
	ТекЭлемент.Наименование = Организация.ShortName;
	ТекЭлемент.НаименованиеПолное = Организация.FullName;
	Если ЕстьРеквизитОбъекта(Организация,"Inn") Тогда
		ТекЭлемент.ИНН = Организация.Inn;                
	КонецЕсли;
	Если ЕстьРеквизитОбъекта(Организация,"Kpp") Тогда
		ТекЭлемент.КПП = Организация.Kpp;
	КонецЕсли;
	ТекЭлемент.КодСтраны = Число(Организация.Address.Country);
	ТекЭлемент.ПредставлениеАдреса = Организация.Address.Description;
	Если ЕстьРеквизитОбъекта(Организация.Address,"RegionCode") Тогда
		ТекЭлемент.КодРегиона = Организация.Address.RegionCode;
	КонецЕсли;     
	Если ЕстьРеквизитОбъекта(Организация,"VersionWB") Тогда
		ТекЭлемент.ФорматОбмена = Перечисления.ФорматыОбменаЕГАИС.V3;
	КонецЕсли;
	ТекЭлемент.ТипОрганизации = ТипОрганизации(Организация);
	ТекЭлемент.Записать();
	Возврат ТекЭлемент.Ссылка;
КонецФункции	

Функция	ПолучитьФайл(ФайлАдрес)
	ФайлВременый = ПолучитьИзВременногоХранилища(ФайлАдрес);
	ИмяФайла = ПолучитьИмяВременногоФайла("xml");
	ФайлВременый.Записать(ИмяФайла);	
	Возврат ИмяФайла;
КонецФункции

Функция ПрочитатьXDTO(ИмяФайла) 
	XMLФайл = Новый ЧтениеXML;
	XMLФайл.ОткрытьФайл(ИмяФайла);
	Загрузка = ФабрикаXDTO.ПрочитатьXML(XMLФайл);
	XMLФайл.Закрыть();
	Попытка
		УдалитьФайлы(ИмяФайла);
	Исключение
		Сообщить(ОписаниеОшибки());
	КонецПопытки;
	Возврат Загрузка;
КонецФункции

// Проверяет наличие у произвольного объекта реквизита с указанным именем.
//
Функция ЕстьРеквизитОбъекта(Объект, ИмяРеквизита)
	
	КлючУникальности   = Новый УникальныйИдентификатор;
	СтруктураРеквизита = Новый Структура(ИмяРеквизита, КлючУникальности);

	ЗаполнитьЗначенияСвойств(СтруктураРеквизита, Объект);
	
	Возврат СтруктураРеквизита[ИмяРеквизита] <> КлючУникальности;
	
КонецФункции

Функция ТипОрганизации(ДанныеОрганизации)
	
	ТипОрганизации = Перечисления.ТипыОрганизацийЕГАИС.ПустаяСсылка();
	
	Если ЕстьРеквизитОбъекта(ДанныеОрганизации, "Type") Тогда
		Если ДанныеОрганизации.Type = "UL" Тогда
			ТипОрганизации = Перечисления.ТипыОрганизацийЕГАИС.ЮридическоеЛицоРФ;
		ИначеЕсли ДанныеОрганизации.Type = "FL" Тогда
			ТипОрганизации = Перечисления.ТипыОрганизацийЕГАИС.ИндивидуальныйПредпринимательРФ;
		ИначеЕсли ДанныеОрганизации.Type = "FO" Тогда
			ТипОрганизации = Перечисления.ТипыОрганизацийЕГАИС.ИностранныйКонтрагент;
		ИначеЕсли ДанныеОрганизации.Type = "TS" Тогда
			ТипОрганизации = Перечисления.ТипыОрганизацийЕГАИС.КонтрагентТаможенногоСоюза;
		КонецЕсли;
	КонецЕсли;
	
	Возврат ТипОрганизации;
	
КонецФункции

Процедура ЗагрузитьСправочникиАП(ФайлАдрес) Экспорт
	ИмяФайла = ПолучитьФайл(ФайлАдрес);
	Данные = ПрочитатьXDTO(ИмяФайла);
	ЗаполнитьСправочникАП(Данные);	
КонецПроцедуры 

Процедура ЗаполнитьСправочникАП(Данные)
	Если Не ТипЗнч(Данные.Product) = Тип("СписокXDTO") Тогда
		ЗагружаемыйСправочник = Новый Массив;
		ЗагружаемыйСправочник.Добавить(Данные.Product);
	Иначе	
		ЗагружаемыйСправочник = Данные.Product;
	КонецЕсли;
	
	Для Каждого Номенклатура Из ЗагружаемыйСправочник Цикл
		//Если Не ЕстьРеквизитОбъекта(Номенклатура,"Capacity") Тогда
		//	Продолжить;
		//КонецЕсли;
		Если Номенклатура.ProductVCode = "020" Тогда
			Сообщить("Внимание в загрузке присутствует спирт. Проверяем позицию " 
				+ Номенклатура.FullName + " с кодом " + Номенклатура.AlcCode + ". Остальная номенклатура загружена.");
			Продолжить;						
		КонецЕсли;
		ЗаполнитьНоменклатуру(Номенклатура);
	КонецЦикла	
КонецПроцедуры

Функция ЗаполнитьНоменклатуру(Номенклатура)
	НайденнаяСсылка = Справочники.КлассификаторАлкогольнойПродукцииЕГАИС.НайтиПоКоду(Номенклатура.AlcCode);
	Если НайденнаяСсылка = Справочники.КлассификаторАлкогольнойПродукцииЕГАИС.ПустаяСсылка() Тогда
		ТекЭлемент = Справочники.КлассификаторАлкогольнойПродукцииЕГАИС.СоздатьЭлемент();
	Иначе
		ТекЭлемент = НайденнаяСсылка.ПолучитьОбъект();
	КонецЕсли;	
	ТекЭлемент.Код = Номенклатура.AlcCode;
	Если ЕстьРеквизитОбъекта(Номенклатура,"ShortName") Тогда
		ТекЭлемент.Наименование = Номенклатура.ShortName;
	Иначе
		ТекЭлемент.Наименование = Номенклатура.FullName;
	КонецЕсли;
	ТекЭлемент.НаименованиеПолное = Номенклатура.FullName;
	ТекЭлемент.Крепость = Число(Номенклатура.AlcVolume);
	Попытка
		ТекЭлемент.Объем = Число(Номенклатура.Capacity);
	Исключение
	КонецПопытки;
	
	Если Номенклатура.UnitType = "Packed" Тогда
		ТекЭлемент.ТипПродукции = Перечисления.ТипыПродукцииЕГАИС.Упакованная;	
	Иначе
		ТекЭлемент.ТипПродукции = Перечисления.ТипыПродукцииЕГАИС.Неупакованная;	
	КонецЕсли;	
	ТекЭлемент.ВидПродукции = Справочники.ВидыАлкогольнойПродукции.НайтиПоКоду(Номенклатура.ProductVCode);
	ТекЭлемент.Производитель = ЗаполнитьОрганизацию(Номенклатура.Producer);	
	ТекЭлемент.Записать();
	
	СопоставитьАП(ТекЭлемент.Ссылка);
	
	Возврат ТекЭлемент.Ссылка;
КонецФункции

Функция НайтиПроизводителя(Производитель)
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	               |	Контрагенты.Ссылка КАК Ссылка
	               |ИЗ
	               |	Справочник.Контрагенты КАК Контрагенты
	               |ГДЕ
	               |	Контрагенты.ИНН = &ИНН
	               |	И Контрагенты.КПП = &КПП";
	Запрос.УстановитьПараметр("ИНН", Производитель.ИНН);
	Запрос.УстановитьПараметр("КПП", Производитель.КПП);
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Если Выборка.Следующий() Тогда
		Возврат Выборка.Ссылка;
	Иначе
		Возврат Справочники.Контрагенты.ПустаяСсылка();
	КонецЕсли;	
КонецФункции

Процедура СопоставитьАП(АП)
	НайденнаяСсылка = Справочники.Номенклатура.НайтиПоРеквизиту("Артикул", АП.Код);
	Если НайденнаяСсылка = Справочники.Номенклатура.ПустаяСсылка() Тогда
		ТекЭлемент = Справочники.Номенклатура.СоздатьЭлемент();
		ТекЭлемент.ПроизводительИмпортерДляДекларацийАлко = НайтиПроизводителя(АП.Производитель);
		КПППроизводителя = ТекЭлемент.ПроизводительИмпортерДляДекларацийАлко.КПП;
		Если КПППроизводителя = "910301001" Тогда
			ТекГруппа = Справочники.ГруппыДоступаНоменклатуры.НайтиПоНаименованию("АП Массандра");
		ИначеЕсли КПППроизводителя = "910345014" Тогда
			ТекГруппа = Справочники.ГруппыДоступаНоменклатуры.НайтиПоНаименованию("АП Таврида");
		ИначеЕсли КПППроизводителя = "910345022" Тогда
			ТекГруппа = Справочники.ГруппыДоступаНоменклатуры.НайтиПоНаименованию("АП Алушта");	
		ИначеЕсли КПППроизводителя = "910345010" Тогда
			ТекГруппа = Справочники.ГруппыДоступаНоменклатуры.НайтиПоНаименованию("АП Гурзуф");	
		Иначе
			ТекГруппа = Неопределено;
		КонецЕсли;
		Если ТекГруппа <> Неопределено Тогда
			ТекЭлемент.ГруппаДоступа = ТекГруппа;
		КонецЕсли;	

		//ТекЭлемент.Наименование = АП.Наименование;
		ТекЭлемент.Наименование = Справочники.Номенклатура.формироватьНаименованиеСокращенное(АП.НаименованиеПолное);
		ТекЭлемент.НаименованиеПолное = АП.НаименованиеПолное;
		ТекЭлемент.Артикул = АП.Код;
		//Если еденица измерения зависит от объема.
		ТекЭлемент.ЕдиницаИзмерения = Справочники.УпаковкиЕдиницыИзмерения.НайтиПоКоду("796");
		ТекЭлемент.ЕдиницаДляОтчетов = Справочники.УпаковкиЕдиницыИзмерения.НайтиПоКоду("796");
		//КонецЕсли;
		ТекЭлемент.ВариантОформленияПродажи = Перечисления.ВариантыОформленияПродажи.РеализацияТоваровУслуг;
		ТекЭлемент.ВесИспользовать = Ложь;
		ТекЭлемент.ВесМожноУказыватьВДокументах = Ложь;
		ТекЭлемент.ВестиУчетСертификатовНоменклатуры = Истина;
		ТекЭлемент.ВидАлкогольнойПродукции = АП.ВидПродукции;
		ТекЭлемент.ВидНоменклатуры = Справочники.ВидыНоменклатуры.НайтиПоНаименованию("Алкоголь собственного производства");
		ТекЭлемент.АлкогольнаяПродукция = Истина;
		ТекЭлемент.ЕстьТоварыДругогоКачества = Ложь;
		ТекЭлемент.ИмпортнаяАлкогольнаяПродукция = Ложь;
		ТекЭлемент.ДлинаИспользовать = Ложь;
		ТекЭлемент.ДлинаМожноУказыватьВДокументах = Ложь;
		ТекЭлемент.ИспользованиеХарактеристик = Перечисления.ВариантыИспользованияХарактеристикНоменклатуры.НеИспользовать;
		ТекЭлемент.ИспользоватьУпаковки = Ложь;
		ТекЭлемент.Качество = Перечисления.ГрадацииКачества.Новый;
		ТекЭлемент.ПодакцизныйТовар = Ложь;
		ТекЭлемент.ПоставляетсяВМногооборотнойТаре = Ложь;
		ТекЭлемент.СтавкаНДС = Перечисления.СтавкиНДС.НДС20;
		ТекЭлемент.ТипНоменклатуры = Перечисления.ТипыНоменклатуры.Товар;
		ТекЭлемент.ОбъемИспользовать = Ложь;
		ТекЭлемент.ОбъемМожноУказыватьВДокументах = Ложь;
		ТекЭлемент.ПлощадьМожноУказыватьВДокументах = Ложь;
		ТекЭлемент.ПлощадьИспользовать = Ложь;
		ТекЭлемент.КоэффициентЕдиницыДляОтчетов = 1;
		ТекЭлемент.ОбособленнаяЗакупкаПродажа = Ложь;
		ТекЭлемент.ОблагаетсяНДПИПоПроцентнойСтавке = Ложь;
		ТекЭлемент.ОсобенностьУчета = Перечисления.ОсобенностиУчетаНоменклатуры.АлкогольнаяПродукция;
		ТекЭлемент.ПродукцияМаркируемаяДляГИСМ = Ложь;
		ТекЭлемент.КиЗГИСМ = Ложь;
		ТекЭлемент.УдалитьСырьевойТовар = Ложь;
		ТекЭлемент.ПодконтрольнаяПродукцияВЕТИС = Ложь;
		ТекЭлемент.АлкогольнаяПродукцияВоВскрытойТаре = Ложь;
		ТекЭлемент.ОблагаетсяНДСУПокупателя = Ложь;
		ТекЭлемент.ВестиУчетПоГТД = Истина;
		Попытка
			ТекЭлемент.ОбъемДАЛ = АП.Объем/10;
		Исключение
		КонецПопытки;
		ТекЭлемент.Крепость = АП.Крепость;
		Если ТекущаяДата()>= Константы.ДатаНачалаУчетаНовойНоменклатуры_багз.Получить() Тогда
			ТекЭлемент.Новая_багз = Истина;
		Иначе
			ТекЭлемент.Новая_багз = Ложь;
		КонецЕсли;
		//ТНВЭД
		Если СтрНайти(АП.НаименованиеПолное, "Вино с защищенным географическим указанием ""Крым"" полусладкое белое") <> 0
			ИЛИ СтрНайти(АП.НаименованиеПолное, "Вино с защищенным географическим указанием ""Крым"" сладкое белое") <> 0
			ИЛИ СтрНайти(АП.НаименованиеПолное, "Вино с защищенным географическим указанием ""Крым"" сухое белое") <> 0
			ИЛИ СтрНайти(АП.НаименованиеПолное, "Вино с защищенным географическим указанием ""Крым"" сухое выдержанное белое") <> 0
			ИЛИ СтрНайти(АП.НаименованиеПолное, "Вино с защищенным географическим указанием «Крым» полусладкое белое") <> 0 
			ИЛИ СтрНайти(АП.НаименованиеПолное, "Вино с защищенным географическим указанием «Крым» сладкое белое") <> 0
			ИЛИ СтрНайти(АП.НаименованиеПолное, "Вино с защищенным географическим указанием «Крым» сухое белое") <> 0
			ИЛИ СтрНайти(АП.НаименованиеПолное, "Вино с защищенным географическим указанием «Крым» сухое выдержанное белое") <> 0
			ИЛИ СтрНайти(АП.НаименованиеПолное, "Вино столовое полусладкое белое") <> 0
			ИЛИ СтрНайти(АП.НаименованиеПолное, "Ликерное вино с защищенным географическим указанием ""Крым"" (специальное вино) белое") <> 0 
			ИЛИ СтрНайти(АП.НаименованиеПолное, "Ликерное вино с защищенным географическим указанием ""Крым"" (специальное вино) выдержанное белое") <> 0
			ИЛИ СтрНайти(АП.НаименованиеПолное, "Ликерное вино с защищенным географическим указанием «Крым» (специальное вино) белое") <> 0
			ИЛИ СтрНайти(АП.НаименованиеПолное, "Ликерное вино с защищенным географическим указанием «Крым» (специальное вино) выдержанное белое") <> 0
			Тогда ТекЭлемент.КодТНВЭД = Справочники.КлассификаторТНВЭД.НайтиПоКоду("2204219300")
		ИначеЕсли  СтрНайти(АП.НаименованиеПолное, "Вино с защищенным географическим указанием ""Крым"" полусладкое красное") <> 0
			ИЛИ СтрНайти(АП.НаименованиеПолное, "Вино с защищенным географическим указанием ""Крым"" полусладкое розовое") <> 0
			ИЛИ СтрНайти(АП.НаименованиеПолное, "Вино с защищенным географическим указанием ""Крым"" сладкое красное") <> 0
			ИЛИ СтрНайти(АП.НаименованиеПолное, "Вино с защищенным географическим указанием ""Крым"" сладкое розовое") <> 0
			ИЛИ СтрНайти(АП.НаименованиеПолное, "Вино с защищенным географическим указанием ""Крым"" сухое выдержанное красное") <> 0
			ИЛИ СтрНайти(АП.НаименованиеПолное, "Вино с защищенным географическим указанием ""Крым"" сухое выдержанное розовое") <> 0
			ИЛИ СтрНайти(АП.НаименованиеПолное, "Вино с защищенным географическим указанием ""Крым"" сухое красное") <> 0
			ИЛИ СтрНайти(АП.НаименованиеПолное, "Вино с защищенным географическим указанием ""Крым"" сухое розовое") <> 0
			ИЛИ СтрНайти(АП.НаименованиеПолное, "Вино с защищенным географическим указанием «Крым» полусладкое красное") <> 0
			ИЛИ СтрНайти(АП.НаименованиеПолное, "Вино с защищенным географическим указанием «Крым» полусладкое розовое") <> 0
			ИЛИ СтрНайти(АП.НаименованиеПолное, "Вино с защищенным географическим указанием «Крым» сладкое красное") <> 0
			ИЛИ СтрНайти(АП.НаименованиеПолное, "Вино с защищенным географическим указанием «Крым» сладкое розовое") <> 0
			ИЛИ СтрНайти(АП.НаименованиеПолное, "Вино с защищенным географическим указанием «Крым» сухое выдержанное красное") <> 0
			ИЛИ СтрНайти(АП.НаименованиеПолное, "Вино с защищенным географическим указанием «Крым» сухое выдержанное розовое") <> 0
			ИЛИ СтрНайти(АП.НаименованиеПолное, "Вино с защищенным географическим указанием «Крым» сухое красное") <> 0
			ИЛИ СтрНайти(АП.НаименованиеПолное, "Вино с защищенным географическим указанием «Крым» сухое розовое") <> 0
			ИЛИ СтрНайти(АП.НаименованиеПолное, "Вино столовое полусладкое красное") <> 0
			ИЛИ СтрНайти(АП.НаименованиеПолное, "Вино столовое полусладкое розовое") <> 0
			ИЛИ СтрНайти(АП.НаименованиеПолное, "Ликерное вино с защищенным географическим указанием ""Крым"" (специальное вино) выдержанное красное") <> 0
			ИЛИ СтрНайти(АП.НаименованиеПолное, "Ликерное вино с защищенным географическим указанием ""Крым"" (специальное вино) выдержанное розовое") <> 0
			ИЛИ СтрНайти(АП.НаименованиеПолное, "Ликерное вино с защищенным географическим указанием ""Крым"" (специальное вино) красное") <> 0
			ИЛИ СтрНайти(АП.НаименованиеПолное, "Ликерное вино с защищенным географическим указанием ""Крым"" (специальное вино) розовое") <> 0
			ИЛИ СтрНайти(АП.НаименованиеПолное, "Ликерное вино с защищенным географическим указанием «Крым» (специальное вино) выдержанное красное") <> 0
			ИЛИ СтрНайти(АП.НаименованиеПолное, "Ликерное вино с защищенным географическим указанием «Крым» (специальное вино) выдержанное розовое") <> 0
			ИЛИ СтрНайти(АП.НаименованиеПолное, "Ликерное вино с защищенным географическим указанием «Крым» (специальное вино) красное") <> 0
			ИЛИ СтрНайти(АП.НаименованиеПолное, "Ликерное вино с защищенным географическим указанием «Крым» (специальное вино) розовое") <> 0
			Тогда ТекЭлемент.КодТНВЭД = Справочники.КлассификаторТНВЭД.НайтиПоКоду("2204219400")
		ИначеЕсли  СтрНайти(АП.НаименованиеПолное, "Винный напиток белый") <> 0
			ИЛИ СтрНайти(АП.НаименованиеПолное, "Винный напиток красный") <> 0
			ИЛИ СтрНайти(АП.НаименованиеПолное, "Винный напиток розовый") <> 0
			Тогда ТекЭлемент.КодТНВЭД = Справочники.КлассификаторТНВЭД.НайтиПоКоду("2206005909");
		КонецЕсли;
		ТекЭлемент.Записать();
		
		//алк. доп. сведения
		ТекЭлемент1 = Справочники.АлкогольДополнительныеСведения.СоздатьЭлемент();
		ТекЭлемент1.Владелец = Справочники.Номенклатура.НайтиПоРеквизиту("Артикул", АП.Код);
		
		ТекЭлемент1.ТипАлкогольнойЛицензииПроизводитель = Справочники.ТипыАлкогольныхЛицензийПроизводитель.НайтиПоКоду(АП.ВидПродукции.Код);
		
		ПозицияГода = 0;	
		Если СтрНайти(АП.НаименованиеПолное,"17") <> 0 Тогда
			ПозицияГода = СтрНайти(АП.НаименованиеПолное,"17");
		ИначеЕсли СтрНайти(АП.НаименованиеПолное,"18") <> 0 Тогда
			ПозицияГода = СтрНайти(АП.НаименованиеПолное,"18");  
		ИначеЕсли СтрНайти(АП.НаименованиеПолное,"19") <> 0 Тогда
			ПозицияГода = СтрНайти(АП.НаименованиеПолное,"19");
		ИначеЕсли СтрНайти(АП.НаименованиеПолное,"20") <> 0 Тогда
			ПозицияГода = СтрНайти(АП.НаименованиеПолное,"20");
	    КонецЕсли;
		Если ПозицияГода <> 0 Тогда
			ГодУрожая = Сред(АП.НаименованиеПолное,ПозицияГода,4);
			Попытка
				ГодУрожая = Число(ГодУрожая);	
			Исключение
				ГодУрожая = 0;
			КонецПопытки;
			Если ГодУрожая <> 0 Тогда
				ТекЭлемент1.ГодУрожая = ГодУрожая;
			КонецЕсли;	
		КонецЕсли;	
		
		пАкцизКод = "";
		Если АП.ВидПродукции.Код = "005" Тогда 
			пАкцизКод = "277"; 
		ИначеЕсли  АП.ВидПродукции.Код = "462" Тогда 
			пАкцизКод = "226";
		ИначеЕсли  АП.ВидПродукции.Код = "404" Тогда 
			пАкцизКод = "277"; 
		ИначеЕсли  АП.ВидПродукции.Код = "430" Тогда 
			пАкцизКод = "226";
		ИначеЕсли  АП.ВидПродукции.Код = "401" Тогда 
			пАкцизКод = "277";
		ИначеЕсли  АП.ВидПродукции.Код = "403" Тогда 
			пАкцизКод = "277";
		ИначеЕсли  АП.ВидПродукции.Код = "4011" Тогда 
			пАкцизКод = "277";
		ИначеЕсли  АП.ВидПродукции.Код = "4121" Тогда 
			пАкцизКод = "226";
		ИначеЕсли  АП.ВидПродукции.Код = "003" Тогда 
			пАкцизКод = "000000002";
		КонецЕсли;
		ТекЭлемент1.Акциз = Справочники.Акцизы.НайтиПоКоду(пАкцизКод);
		
		пВидБутылкиКод = "";
		пТараКод = "";
		//Если  АП.Объем = 0.75 Тогда 
		//	пВидБутылкиКод = "27";
		//	пТараКод = "11";
		//ИначеЕсли АП.Объем = 0.7 Тогда 
		//	пВидБутылкиКод = "29";
		//	пТараКод = "9";
		//ИначеЕсли АП.Объем = 0.8 Тогда 
		//	пВидБутылкиКод = "21";
		//	пТараКод = "9";
		//ИначеЕсли АП.Объем = 3 Тогда 
		//	пВидБутылкиКод = "001";
		//	пТараКод = "13";
		//ИначеЕсли АП.Объем = 5 Тогда 
		//	пВидБутылкиКод = "002";
		//	пТараКод = "13";
		//ИначеЕсли АП.Объем = 10 Тогда 
		//	пВидБутылкиКод = "45";
		//	пТараКод = "13";
		//ИначеЕсли АП.Объем = 50 Тогда 
		//	пВидБутылкиКод = "52";
		//	пТараКод = "14";
		//КонецЕсли;
		
        Если  АП.Объем = 0.75 Тогда 
            пВидБутылкиКод = "27"; 
            пТараКод = "11";
        ИначеЕсли АП.Объем = 0.7 Тогда 
            пВидБутылкиКод = "29";
            пТараКод = "9";
        ИначеЕсли АП.Объем = 0.8 Тогда 
            пВидБутылкиКод = "21";
            пТараКод = "9";
        ИначеЕсли АП.Объем = 3 Тогда 
            пВидБутылкиКод = "1112";
            пТараКод = "1112";
        ИначеЕсли АП.Объем = 5 Тогда 
            пВидБутылкиКод = "1113";
            пТараКод = "1113";
        ИначеЕсли АП.Объем = 10 Тогда 
            пВидБутылкиКод = "45";
            пТараКод = "13";
        ИначеЕсли АП.Объем = 50 Тогда 
            пВидБутылкиКод = "52";
            пТараКод = "14";
        ИначеЕсли АП.Объем = 1.5 Тогда 
            пВидБутылкиКод = "1114";
            пТараКод = "1114";
        ИначеЕсли АП.Объем = 0.375 Тогда 
            пВидБутылкиКод = "54";
            пТараКод = "11";
        ИначеЕсли АП.Объем = 0.2 Тогда 
            пВидБутылкиКод = "6";
            пТараКод = "8";
        ИначеЕсли АП.Объем = 9.0 Тогда 
            пВидБутылкиКод = "11111";
            пТараКод = "1111";
        КонецЕсли;
		
		ТекЭлемент1.ВидБутылки = Справочники.ВидыБутылок.НайтиПоКоду(пВидБутылкиКод);
		ТекЭлемент1.Тара = Справочники.Тара.НайтиПоКоду(пТараКод);
		
		ТекЭлемент1.Крепость = АП.Крепость;
		
		ТекЭлемент1.Записать();
		
		НоваяЗапись = РегистрыСведений.СоответствиеНоменклатурыЕГАИС.СоздатьМенеджерЗаписи();
		НоваяЗапись.Активность = Истина;
		НоваяЗапись.АлкогольнаяПродукция = АП;
		НоваяЗапись.Номенклатура = ТекЭлемент.Ссылка;
		НоваяЗапись.Порядок = 2;
		НоваяЗапись.Записать(Истина);
			//Иначе
		//ТекЭлемент = НайденнаяСсылка.ПолучитьОбъект();
	КонецЕсли;
	
КонецПроцедуры

Процедура ЗагрузитьОтчетОПроизводстве(ФайлАдрес) Экспорт 
	ИмяФайла = ПолучитьФайл(ФайлАдрес);
	Данные = ПрочитатьXDTO(ИмяФайла);
	ЗаполнитьОтчетОПроизводстве(Данные);	
КонецПроцедуры	

Функция ОпределитьВерсию(Данные)	
	Попытка
		Док = Данные.Document.RepProducedProduct_v4;
	Исключение
		Док = Данные.Document.RepProducedProduct_v3;
	КонецПопытки;
	
	Возврат Док;
КонецФункции

Процедура ЗаполнитьОтчетОПроизводстве(Данные)
	Док = "";
	Док = ОпределитьВерсию(Данные);
	Если Не ТипЗнч(Док) = Тип("СписокXDTO") Тогда
		ЗагружаемыеДокументы = Новый Массив;
		ЗагружаемыеДокументы.Добавить(Док);
	Иначе	
		ЗагружаемыеДокументы = Док;
	КонецЕсли;
	
	Для Каждого Документ Из ЗагружаемыеДокументы Цикл
		ЗаполнитьДокументПроизводство(Документ,Данные.Owner.FSRAR_ID);	
	КонецЦикла;  
КонецПроцедуры 

Процедура ЗаполнитьДокументПроизводство(Документ,ИДВладельца)
	Отбор = Новый Структура("Идентификатор",Документ.Identity);
	Выборка = Документы.ТТНВходящаяЕГАИС.Выбрать(,,Отбор);
	Если Выборка.Следующий() Тогда
		ТекДок = Выборка.ПолучитьОбъект();
	Иначе
		ТекДок = Документы.ТТНВходящаяЕГАИС.СоздатьДокумент();
	КонецЕсли;
	ТекДок.Дата = XMLЗначение(Тип("Дата"),Документ.Header.ProducedDate);
	ТекДок.ВидОперации = Перечисления.ВидыОперацийТТНВходящейЕГАИС.ПриходнаяНакладная;
	Производитель = Справочники.КлассификаторОрганизацийЕГАИС.НайтиПоКоду(ИДВладельца);
	ТекДок.Организация = Производитель.Контрагент;
	ТекДок.ТорговыйОбъект = Производитель.ТорговыйОбъект;
	ТекДок.Идентификатор =  Документ.Identity;
	//ТекДок.ДатаРегистрацииДвижений = XMLЗначение(Тип("Дата"),Документ.Header.Date);
	ТекДок.ДатаРегистрацииДвижений = XMLЗначение(Тип("Дата"),Документ.Header.ProducedDate);
	//ТекДок.ДатаОтгрузки = XMLЗначение(Тип("Дата"),Документ.Header.Date);
	ТекДок.ДатаОтгрузки = XMLЗначение(Тип("Дата"),Документ.Header.ProducedDate);
	ТекДок.НомерТТН = "Произв-" + Документ.Header.NUMBER;
	ТекДок.ДатаТТН = XMLЗначение(Тип("Дата"),Документ.Header.ProducedDate);
	ТекДок.Упакована = Ложь;
	ТекДок.ЕстьРасхождения = Ложь;
	ТекДок.Грузополучатель = Производитель;
	ТекДок.Грузоотправитель = Производитель;
	ТекДок.ФорматОбмена = Перечисления.ФорматыОбменаЕГАИС.V3;
	ТекДок.СтатусПроверкиИПодбора = Перечисления.СтатусыПроверкиИПодбораЕГАИС.Завершено;
	Если Не ТипЗнч(Документ.Content.Position) = Тип("СписокXDTO") Тогда
		ТабличнаяЧастьПроизводство = Новый Массив;
		ТабличнаяЧастьПроизводство.Добавить(Документ.Content.Position);
	Иначе	
		ТабличнаяЧастьПроизводство = Документ.Content.Position;
	КонецЕсли;
	ЗаполнитьТабличнуюЧастьПроизводство(ТабличнаяЧастьПроизводство,ТекДок);
	ТекДок.Записать(РежимЗаписиДокумента.Запись);
	ЗаполнитьСтатусДокументаПринят(ТекДок.Ссылка);
	ТекДок.Записать(РежимЗаписиДокумента.Проведение); 
	
	Сообщить("Отчет о производстве загружен.");
	
	Попытка
		УдалитьФайлы(ПутьКПапкеОбмена + "\prod.xml");
	Исключение
		Сообщить(ОписаниеОшибки());
	КонецПопытки;
	
	//Запись в журнал 
	ЗаписьУжеЕсть = Ложь; 
	Для Каждого Товар Из ТекДок.Товары Цикл
		ЗаписьУжеЕсть = ПроверкаЖурнала(Товар.АлкогольнаяПродукция, Товар.Справка2); 	
		Если Не ЗаписьУжеЕсть Тогда
			НоваяЗапись = Документы.ПоказателиАП.СоздатьДокумент();
			НоваяЗапись.АП = Товар.АлкогольнаяПродукция;
			НоваяЗапись.Справка2 = Товар.Справка2;
			НоваяЗапись.ДатаРозлива = Товар.Справка2.Справка1.ДатаРозлива;
			НоваяЗапись.Дата = ТекущаяДата();
			НоваяЗапись.Записать(РежимЗаписиДокумента.Проведение);
		КонецЕсли;
	КонецЦикла;	
КонецПроцедуры	

Функция ПроверкаЖурнала(АП, Справка2)
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	               |	ПоказателиАП.Ссылка КАК Ссылка
	               |ИЗ
	               |	Документ.ПоказателиАП КАК ПоказателиАП
	               |ГДЕ
	               |	ПоказателиАП.АП = &АП
	               |	И ПоказателиАП.Справка2 = &Справка2";
	Запрос.УстановитьПараметр("АП",АП);  
	Запрос.УстановитьПараметр("Справка2",Справка2); 
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Если Выборка.Следующий() Тогда
		Возврат Истина;
	Иначе
		Возврат Ложь;
	КонецЕсли;	
КонецФункции

Процедура ЗаполнитьТабличнуюЧастьПроизводство(ТабличнаяЧастьПроизводство,ТекДок)
	ТекДок.Товары.Очистить();
	ТекДок.АкцизныеМарки.Очистить();
	Для Каждого Строка Из ТабличнаяЧастьПроизводство Цикл
		НоваяСтрока = ТекДок.Товары.Добавить();
		ЗаполнитьСтрокуТТНВходящая(НоваяСтрока,Строка,ТекДок);
	КонецЦикла;
	ЗаполнитьРезультатыПроверки(ТекДок);  	
КонецПроцедуры

Процедура ЗаполнитьСтрокуТТНВходящая(НоваяСтрока,Строка,ТекДок)
	НайденнаяСсылка = Справочники.КлассификаторАлкогольнойПродукцииЕГАИС.НайтиПоКоду(Строка.ProductCode);
	Если НайденнаяСсылка = Справочники.КлассификаторАлкогольнойПродукцииЕГАИС.ПустаяСсылка() Тогда
		ТекЭлемент = Справочники.КлассификаторАлкогольнойПродукцииЕГАИС.СоздатьЭлемент();
		Сообщить("Отсутствует АП с кодом " +  Строка.ProductCode,СтатусСообщения.Важное);
		ТекЭлемент.Код = Строка.ProductCode;
		ТекЭлемент.Записать();
		НоменклатураАП = ТекЭлемент.Ссылка;
	Иначе
		НоменклатураАП = НайденнаяСсылка;
	КонецЕсли;	
	НоваяСтрока.АлкогольнаяПродукция = НоменклатураАП;
	ЗаполнитьНоменклатуруПоАПВСТроке(НоваяСтрока);
	НоваяСтрока.Количество = Число(Строка.Quantity);
	НоваяСтрока.КоличествоФакт = Число(Строка.Quantity);
	НоваяСтрока.НомерПартии = Строка.Party;
	НоваяСтрока.ИдентификаторСтроки = Строка.Identity;
	ЗаполнитьСправку2ВСтроке(НоваяСтрока,Строка,ТекДок);
	Если Строка.Свойства().Получить("MarkInfo") <> Неопределено Тогда
		Если Не ТипЗнч(Строка.MarkInfo.amc) = Тип("СписокXDTO") Тогда
			ЗагружаемыеМарки = Новый Массив;
			ЗагружаемыеМарки.Добавить(Строка.MarkInfo.amc);
		Иначе	
			ЗагружаемыеМарки = Строка.MarkInfo.amc;
		КонецЕсли;
	    ДанныеЗаполнеияМарок = Новый Структура;
		ДанныеЗаполнеияМарок.Вставить("ЗагружаемыеМарки",ЗагружаемыеМарки);
		ДанныеЗаполнеияМарок.Вставить("Справка2",НоваяСтрока.Справка2);
		ДанныеЗаполнеияМарок.Вставить("Номенклатура",НоваяСтрока.Номенклатура);
		ДанныеЗаполнеияМарок.Вставить("ТаблМарок",ТекДок.АкцизныеМарки);
		ДанныеЗаполнеияМарок.Вставить("ДатаУпаковки",ТекДок.ДатаОтгрузки);
		ЗаполнитьМаркиТТН(ДанныеЗаполнеияМарок);
	КонецЕсли;
КонецПроцедуры

Функция ЗаполнитьНоменклатуруПоАПВСТроке(НоваяСтрока)
		
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ РАЗЛИЧНЫЕ
	               |	СоответствиеНоменклатурыЕГАИС.АлкогольнаяПродукция КАК АлкогольнаяПродукция,
	               |	СоответствиеНоменклатурыЕГАИС.Номенклатура КАК Номенклатура
	               |ИЗ
	               |	РегистрСведений.СоответствиеНоменклатурыЕГАИС КАК СоответствиеНоменклатурыЕГАИС
	               |ГДЕ
	               |	СоответствиеНоменклатурыЕГАИС.АлкогольнаяПродукция = &НоменклатураАП
	               |	И СоответствиеНоменклатурыЕГАИС.Характеристика = &Характеристика
	               |	И (СоответствиеНоменклатурыЕГАИС.Серия = &Серия
	               |			ИЛИ &СерияЗаполнена = ЛОЖЬ)";
	
	Запрос.УстановитьПараметр("НоменклатураАП", НоваяСтрока.АлкогольнаяПродукция);
	Запрос.УстановитьПараметр("Характеристика", НоваяСтрока.Характеристика);
	Запрос.УстановитьПараметр("Серия", НоваяСтрока.Серия);
	Запрос.УстановитьПараметр("СерияЗаполнена", ЗначениеЗаполнено(НоваяСтрока.Серия));
	
	Результат = Запрос.Выполнить();
	Выборка = Результат.Выбрать();
	
	Если Выборка.Следующий() Тогда
		Возврат Выборка.Номенклатура;
	Иначе
	//	Номенклатура = Справочники.Номенклатура.НайтиПоРеквизиту("Артикул", НоваяСтрока.АлкогольнаяПродукция.Код);
	//	
	//	НоваяЗапись = РегистрыСведений.СоответствиеНоменклатурыЕГАИС.СоздатьМенеджерЗаписи();
	//	НоваяЗапись.Период = ТекущаяДата();
	//	НоваяЗапись.Активность = Истина;
	//	НоваяЗапись.АлкогольнаяПродукция = НоваяСтрока.АлкогольнаяПродукция;
	//	НоваяЗапись.Номенклатура = Номенклатура;
	//	НоваяЗапись.Справка2 = НоваяСтрока.Справка2;
	//	НоваяЗапись.Записать(Истина);
	
		Возврат Неопределено;
		
	КонецЕсли;	
		
КонецФункции

Процедура ЗаполнитьСправку2ВСтроке(НоваяСтрока,Строка,ТекДок)
	Справка1 = ПолучитьИЗаполнитьСправку1(Строка.FormOneRegId,ТекДок.ДатаТТН,НоваяСтрока.АлкогольнаяПродукция);
	Если ВРег(Лев(НоваяСтрока.НомерПартии,4)) = "БЕЗ " Тогда
		ЭксПрод = Истина;
	Иначе
		ЭксПрод = Ложь;
	КонецЕсли;	
	НоваяСтрока.Справка2 = ПолучитьИЗаполнитьСправку2(Строка.FormTwoRegId,Справка1,НоваяСтрока.АлкогольнаяПродукция,ТекДок,Строка,НоваяСтрока.Количество,ЭксПрод);
	НоваяСтрока.НомерСправки2Поставщика = НоваяСтрока.Справка2.РегистрационныйНомер;
КонецПроцедуры

Функция ПолучитьИЗаполнитьСправку1(НомерСправки1,ДатаРозлива,АП)
	НайденнаяСсылка = Справочники.Справки1ЕГАИС.НайтиПоНаименованию(НомерСправки1,Истина);
	Если НайденнаяСсылка = Справочники.Справки1ЕГАИС.ПустаяСсылка() Тогда
		Справка1 = Справочники.Справки1ЕГАИС.СоздатьЭлемент();
	Иначе
		Справка1 = НайденнаяСсылка.ПолучитьОбъект();
	КонецЕсли;	
	Справка1.АлкогольнаяПродукция = АП;
	Справка1.Наименование = НомерСправки1;
	Справка1.РегистрационныйНомер = НомерСправки1;
	Справка1.ДатаРозлива = ДатаРозлива;
	Справка1.Записать();
	Возврат Справка1.Ссылка;
КонецФункции 

Функция ПолучитьИЗаполнитьСправку2(НомерСправки2,Справка1,АП,ТТН,Строка,Количество,ЭксортнаяПрод = Ложь)
	НайденнаяСсылка = Справочники.Справки2ЕГАИС.НайтиПоНаименованию(НомерСправки2,Истина);
	Если НайденнаяСсылка = Справочники.Справки2ЕГАИС.ПустаяСсылка() Тогда
		Справка2 = Справочники.Справки2ЕГАИС.СоздатьЭлемент();
	Иначе
		Справка2 = НайденнаяСсылка.ПолучитьОбъект();
	КонецЕсли;	
	Справка2.АлкогольнаяПродукция = АП;
	Справка2.Наименование = НомерСправки2;
	Справка2.РегистрационныйНомер = НомерСправки2;
	Справка2.Справка1 = Справка1;
	Справка2.НомерСправки1 = Справка1.РегистрационныйНомер;
	Справка2.ДокументОснование = ТТН;
	Справка2.Количество = Количество;
	Справка2.Экспорт = ЭксортнаяПрод;
	Справка2.ЕстьДиапазонНомеровАкцизныхМарок = Истина;
	Справка2.ДиапазоныНомеровАкцизныхМарок.Очистить();
	//Игорь, если не указаны диапазоны
	Попытка 
	Диапозоны = Строка.MarkInfo; 	
	Если Не ТипЗнч(Диапозоны.Ranges.Range) = Тип("СписокXDTO") Тогда
		ЗагружаемыеДиапозоны = Новый Массив;
		ЗагружаемыеДиапозоны.Добавить(Диапозоны.Ranges.Range);
	Иначе	
		ЗагружаемыеДиапозоны = Диапозоны.Ranges.Range;
	КонецЕсли;
	
	Для Каждого Строка Из ЗагружаемыеДиапозоны Цикл
		НоваяСтрока = Справка2.ДиапазоныНомеровАкцизныхМарок.Добавить();
		НоваяСтрока.ТипМарки = Диапозоны.Type;
		НоваяСтрока.СерияМарки = Строка.Rank;
		НоваяСтрока.НачальныйНомер = Строка.Start;
		НоваяСтрока.КонечныйНомер = Строка.Last;
	КонецЦикла;
	Исключение
		Сообщить("Диапазоны марок не указаны", СтатусСообщения.Важное);
	КонецПопытки;
	
	Если Строка.Свойства().Получить("MarkInfo") <> Неопределено ИЛИ Строка.Свойства().Получить("MarkCodeInfo") <> Неопределено Тогда
		Справка2.ЕстьДиапазонНомеровАкцизныхМарок = Истина;
	Иначе
		Справка2.ЕстьДиапазонНомеровАкцизныхМарок = Ложь;
	КонецЕсли;
	
	Справка2.Записать();
	Возврат Справка2.Ссылка;
КонецФункции 

Процедура ЗаполнитьРезультатыПроверки(ТекДок)
	РузультатПроверкиАП.ПулНеизвестныхАкцизныхМарок.Очистить();
	РузультатПроверкиАП.ТаблицаНеМаркируемойПродукции.Очистить();
	Для Каждого Строка Из ТекДок.Товары Цикл
		НоваяСтрока = РузультатПроверкиАП.ПулНеизвестныхАкцизныхМарок.Добавить();
		НоваяСтрока.АлкогольнаяПродукция = Строка.АлкогольнаяПродукция;
		НоваяСтрока.Количество = Строка.Количество;
		НоваяСтрока.Справка2 = Строка.Справка2;
		НоваяСтрока = РузультатПроверкиАП.ТаблицаНеМаркируемойПродукции.Добавить();
		НоваяСтрока.АлкогольнаяПродукция = Строка.АлкогольнаяПродукция;
		НоваяСтрока.КоличествоПоДокументу = Строка.Количество;
		НоваяСтрока.КоличествоФактическое = Строка.Количество;
		НоваяСтрока.Справка2 = Строка.Справка2;
	КонецЦикла;
	ТекДок.ДанныеПроверкиИПодбора = Новый ХранилищеЗначения(РузультатПроверкиАП);
КонецПроцедуры	

Процедура ЗаполнитьСтатусДокументаПринят(Ссылка)
	НаборЗаписей = РегистрыСведений.СтатусыДокументовЕГАИС.СоздатьНаборЗаписей();
	НаборЗаписей.Отбор.Документ.Установить(Ссылка);
	НоваяЗапись = НаборЗаписей.Добавить();                  
	НоваяЗапись.Документ = Ссылка;
	Если ТипЗнч(Ссылка) = Тип("ДокументСсылка.ТТНВходящаяЕГАИС") Тогда
		Статус = Перечисления.СтатусыОбработкиТТНВходящейЕГАИС.Подтвержден;
	ИначеЕсли ТипЗнч(Ссылка) = Тип("ДокументСсылка.ТТНИсходящаяЕГАИС") Тогда
		Статус = Перечисления.СтатусыОбработкиТТНИсходящейЕГАИС.Подтвержден;
	ИначеЕсли ТипЗнч(Ссылка) = Тип("ДокументСсылка.АктПостановкиНаБалансЕГАИС") Тогда
		Статус = Перечисления.СтатусыОбработкиАктаПостановкиНаБалансЕГАИС.ПроведенЕГАИС;
	ИначеЕсли ТипЗнч(Ссылка) = Тип("ДокументСсылка.АктСписанияЕГАИС") Тогда
		Статус = Перечисления.СтатусыОбработкиАктаСписанияЕГАИС.ПроведенЕГАИС;
	КонецЕсли;	
	НоваяЗапись.Статус = Статус;
	НоваяЗапись.ДальнейшееДействие1 = Перечисления.ДальнейшиеДействияПоВзаимодействиюЕГАИС.НеТребуется;
    НоваяЗапись.ДальнейшееДействие2 = Перечисления.ДальнейшиеДействияПоВзаимодействиюЕГАИС.НеТребуется;
	НоваяЗапись.ДальнейшееДействие3 = Перечисления.ДальнейшиеДействияПоВзаимодействиюЕГАИС.НеТребуется;
	НаборЗаписей.Записать();
КонецПроцедуры

Процедура ЗаписатьСтатусВыгруженныхДокументов(СписокДокументов) Экспорт 
	Для каждого Строка Из СписокДокументов Цикл
		ЗаполнитьСтатусДокументаПринят(Строка.Ссылка);
	КонецЦикла;	
КонецПроцедуры

Функция ПолучитьДанныеДоставки(Ссылка)
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	               |	ТТНИсходящаяЕГАИС.ДокументОснование КАК Реализация
	               |ПОМЕСТИТЬ ВТ_Реализация
	               |ИЗ
	               |	Документ.ТТНИсходящаяЕГАИС КАК ТТНИсходящаяЕГАИС
	               |ГДЕ
	               |	ТТНИсходящаяЕГАИС.Ссылка = &Ссылка
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	ТранспортнаяНакладнаяДокументыОснования.Ссылка КАК ТТН
	               |ИЗ
	               |	ВТ_Реализация КАК ВТ_Реализация
	               |		ЛЕВОЕ СОЕДИНЕНИЕ Документ.ТранспортнаяНакладная.ДокументыОснования КАК ТранспортнаяНакладнаяДокументыОснования
	               |		ПО ВТ_Реализация.Реализация = ТранспортнаяНакладнаяДокументыОснования.ДокументОснование";
				   
	Запрос.УстановитьПараметр("Ссылка", Ссылка);
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Если Выборка.Следующий() Тогда
		Возврат Выборка.ТТН;
	КонецЕсли;
	
	
КонецФункции

Функция НайтиГрузополучателяПоКлассификатору(Контрагент)
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	               |	КлассификаторОрганизацийЕГАИС.Ссылка КАК Ссылка
	               |ИЗ
	               |	Справочник.КлассификаторОрганизацийЕГАИС КАК КлассификаторОрганизацийЕГАИС
	               |ГДЕ
	               |	КлассификаторОрганизацийЕГАИС.ИНН = &ИНН
	               |	И КлассификаторОрганизацийЕГАИС.КПП = &КПП";
	Запрос.УстановитьПараметр("ИНН", Контрагент.ИНН);
	Запрос.УстановитьПараметр("КПП", Контрагент.КПП);
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Если Выборка.Следующий() Тогда		
		Возврат Выборка.Ссылка;		
	КонецЕсли;	
КонецФункции

Процедура ВыгрузитьТТНИсходящая(ПолучаемыеФайлы,СписокДокументов) Экспорт
	
	Для Каждого Строка Из СписокДокументов Цикл
		
		Сообщение = Документы.ТТНИсходящаяЕГАИС.ТТНИсходящаяЕГАИСXML(Строка.Ссылка);
		
		Сообщение[0].ТекстСообщенияXML = СтрЗаменить(Сообщение[0].ТекстСообщенияXML,"TTNSingle_v3","TTNSingle_v4");
		Сообщение[0].ТекстСообщенияXML = СтрЗаменить(Сообщение[0].ТекстСообщенияXML,"WayBill_v3","WayBill_v4");
		Сообщение[0].ТекстСообщенияXML = СтрЗаменить(Сообщение[0].ТекстСообщенияXML,"TRAN_CAR","TRANSPORT_REGNUMBER");
		Сообщение[0].ТекстСообщенияXML = СтрЗаменить(Сообщение[0].ТекстСообщенияXML,
											"<wb:TRAN_TYPE>" + Сообщение[0].Документ.ТипДоставки + "</wb:TRAN_TYPE>",
											"<wb:TRANSPORT_TYPE>car</wb:TRANSPORT_TYPE>");  
		//Если ТипЗнч(Сообщение[0].ДокументОснование) = Тип("ДокументСсылка.ПеремещениеТоваров") Тогда
		//	Замена = "<wb:Transport>" + Символы.ПС + Символы.Таб + Символы.Таб + Символы.Таб + Символы.Таб + Символы.Таб 
		//			+ "<wb:ChangeOwnership>NotChange</wb:ChangeOwnership>";	
		//	Сообщение[0].ТекстСообщенияXML = СтрЗаменить(Сообщение[0].ТекстСообщенияXML,"WBInvoiceFromMe","WBInternal");		
		//Иначе	
		//	Замена = "<wb:Transport>" + Символы.ПС + Символы.Таб + Символы.Таб + Символы.Таб + Символы.Таб + Символы.Таб 
		//			+ "<wb:ChangeOwnership>IsChange</wb:ChangeOwnership>";
		//КонецЕсли;	
		
		Если Сообщение[0].Документ.ПравоСобственности = Перечисления.ББ_ПравоСобственностиЕГАИС.НеМеняется Тогда
			Замена = "<wb:Transport>" + Символы.ПС + Символы.Таб + Символы.Таб + Символы.Таб + Символы.Таб + Символы.Таб 
					+ "<wb:ChangeOwnership>NotChange</wb:ChangeOwnership>";	
		Иначе
			Замена = "<wb:Transport>" + Символы.ПС + Символы.Таб + Символы.Таб + Символы.Таб + Символы.Таб + Символы.Таб 
					+ "<wb:ChangeOwnership>IsChange</wb:ChangeOwnership>";
		КонецЕсли;	
		
		Сообщение[0].ТекстСообщенияXML = СтрЗаменить(Сообщение[0].ТекстСообщенияXML,"<wb:Transport>",Замена);

		
		ИмяФайла = ПолучитьИмяВременногоФайла("xml");
		XML = Новый ЗаписьXML;                   
		XML.ОткрытьФайл(ИмяФайла);
		XML.ЗаписатьБезОбработки(Сообщение[0].ТекстСообщенияXML);
		XML.Закрыть();
		
		
		ФайлДвоичныеДанные = Новый ДвоичныеДанные(ИмяФайла);      
		ФайлАдрес = ПоместитьВоВременноеХранилище(ФайлДвоичныеДанные, Новый УникальныйИдентификатор);
		ПолучаемыеФайлы.Добавить(Новый ОписаниеПередаваемогоФайла(Строка.Ссылка.НомерТТН + ".xml", ФайлАдрес));
		Попытка
			УдалитьФайлы(ИмяФайла);
		Исключение
		КонецПопытки;

	КонецЦикла;	
	
	//СоответствиеПространстваИмен = Новый Структура;
	//СоответствиеПространстваИмен.Вставить("ns","http://fsrar.ru/WEGAIS/WB_DOC_SINGLE_01");
	//СоответствиеПространстваИмен.Вставить("xsi","http://www.w3.org/2001/XMLSchema-instance");
	//СоответствиеПространстваИмен.Вставить("wb","http://fsrar.ru/WEGAIS/TTNSingle_v3");
	//СоответствиеПространстваИмен.Вставить("oref","http://fsrar.ru/WEGAIS/ClientRef_v2");
	//СоответствиеПространстваИмен.Вставить("pref","http://fsrar.ru/WEGAIS/ProductRef_v2");
	//СоответствиеПространстваИмен.Вставить("ce","http://fsrar.ru/WEGAIS/CommonV3");
	//
	//Для Каждого Строка Из СписокДокументов Цикл
	//	
	//	ТТН = ПолучитьДанныеДоставки(Строка.Ссылка); 	

	//	ИмяФайла = ПолучитьИмяВременногоФайла("xml");
	//	XML = Новый ЗаписьXML;                   
	//	XML.ОткрытьФайл(ИмяФайла);
	//	XML.ЗаписатьОбъявлениеXML();
	//	XML.ЗаписатьНачалоЭлемента("Documents",СоответствиеПространстваИмен.ns);
	//		XML.ЗаписатьАтрибут("Version","1.0");
	//		XML.ЗаписатьСоответствиеПространстваИмен("ns",СоответствиеПространстваИмен.ns);
	//		XML.ЗаписатьСоответствиеПространстваИмен("xsi",СоответствиеПространстваИмен.xsi);
	//		XML.ЗаписатьСоответствиеПространстваИмен("wb",СоответствиеПространстваИмен.wb);
	//	XML.ЗаписатьСоответствиеПространстваИмен("oref",СоответствиеПространстваИмен.oref);
	//	XML.ЗаписатьСоответствиеПространстваИмен("pref",СоответствиеПространстваИмен.pref);
	//	XML.ЗаписатьСоответствиеПространстваИмен("ce",СоответствиеПространстваИмен.ce);
	//	XML.ЗаписатьНачалоЭлемента("Owner",СоответствиеПространстваИмен.ns);
	//	ЗаписатьXML(XML, Строка.Ссылка.Грузоотправитель.Код, "FSRAR_ID",СоответствиеПространстваИмен.ns,НазначениеТипаXML.Неявное);	
	//	XML.ЗаписатьКонецЭлемента();
	//	XML.ЗаписатьНачалоЭлемента("Document",СоответствиеПространстваИмен.ns);
	//	XML.ЗаписатьНачалоЭлемента("WayBill_v3",СоответствиеПространстваИмен.ns);
	//	ЗаписатьXML(XML, Строка.Ссылка.Идентификатор, "Identity",СоответствиеПространстваИмен.wb,НазначениеТипаXML.Неявное);	
	//	XML.ЗаписатьНачалоЭлемента("Header",СоответствиеПространстваИмен.wb);
	//	ЗаписатьXML(XML, "WBInvoiceFromMe", "Type",СоответствиеПространстваИмен.wb,НазначениеТипаXML.Неявное);
	//	ЗаписатьXML(XML,Строка.Ссылка.НомерТТН,"NUMBER",СоответствиеПространстваИмен.wb,НазначениеТипаXML.Неявное);
	//	ЗаписатьXML(XML,Лев(XMLСтрока(Строка.Ссылка.ДатаТТН),10),"Date",СоответствиеПространстваИмен.wb,НазначениеТипаXML.Неявное);
	//	ЗаписатьXML(XML,Лев(XMLСтрока(Строка.Ссылка.ДатаОтгрузки),10),"ShippingDate",СоответствиеПространстваИмен.wb,НазначениеТипаXML.Неявное);
	//	XML.ЗаписатьНачалоЭлемента("Transport",СоответствиеПространстваИмен.wb);
	//		ЗаписатьXML(XML,"413","TRAN_TYPE",СоответствиеПространстваИмен.wb,НазначениеТипаXML.Неявное);
	//		//ИТ-отдел 04.12.2018, дополнение полей
	//		Если ТТН <>Неопределено Тогда
	//		//	Попытка
	//				ЗаписатьXML(XML,СокрЛП(ТТН.АвтомобильМарка) +" "+ СокрЛП(ТТН.АвтомобильГосударственныйНомер),"TRAN_CAR",СоответствиеПространстваИмен.wb,НазначениеТипаXML.Неявное);
	//				ЗаписатьXML(XML,СокрЛП(ТТН.ЗаказчикПеревозки),"TRAN_CUSTOMER",СоответствиеПространстваИмен.wb,НазначениеТипаXML.Неявное);
	//				ЗаписатьXML(XML,СокрЛП(ТТН.Водитель),"TRAN_DRIVER",СоответствиеПространстваИмен.wb,НазначениеТипаXML.Неявное);
	//				ЗаписатьXML(XML,СокрЛП(ТТН.АдресПогрузки),"TRAN_LOADPOINT",СоответствиеПространстваИмен.wb,НазначениеТипаXML.Неявное);
	//				ЗаписатьXML(XML,СокрЛП(ТТН.АдресДоставки),"TRAN_UNLOADPOINT",СоответствиеПространстваИмен.wb,НазначениеТипаXML.Неявное);
	//				ЗаписатьXML(XML,СокрЛП(ТТН.Перевозчик),"TRAN_FORWARDER",СоответствиеПространстваИмен.wb,НазначениеТипаXML.Неявное);	
	//		//	Исключение
	//		//	КонецПопытки;
	//		Иначе				
	//			ЗаписатьXML(XML,Строка.Ссылка.Автомобиль,"TRAN_CAR",СоответствиеПространстваИмен.wb,НазначениеТипаXML.Неявное);
	//			ЗаписатьXML(XML,Строка.Ссылка.Заказчик,"TRAN_CUSTOMER",СоответствиеПространстваИмен.wb,НазначениеТипаXML.Неявное);
	//			ЗаписатьXML(XML,Строка.Ссылка.Водитель,"TRAN_DRIVER",СоответствиеПространстваИмен.wb,НазначениеТипаXML.Неявное);
	//			ЗаписатьXML(XML,Строка.Ссылка.ПунктПогрузки,"TRAN_LOADPOINT",СоответствиеПространстваИмен.wb,НазначениеТипаXML.Неявное);
	//			ЗаписатьXML(XML,Строка.Ссылка.ПунктРазгрузки,"TRAN_UNLOADPOINT",СоответствиеПространстваИмен.wb,НазначениеТипаXML.Неявное);
	//			ЗаписатьXML(XML,Строка.Ссылка.Перенаправление,"TRAN_FORWARDER",СоответствиеПространстваИмен.wb,НазначениеТипаXML.Неявное);
	//		КонецЕсли;
	//	XML.ЗаписатьКонецЭлемента();
	//	
	//	XML.ЗаписатьНачалоЭлемента("Shipper",СоответствиеПространстваИмен.wb);
	//	ЗаполнитьОрганизациюXMLДокумента(XML,СоответствиеПространстваИмен,Строка.Ссылка.Грузоотправитель);
	//	XML.ЗаписатьКонецЭлемента();
	//	
	//	
	//	XML.ЗаписатьНачалоЭлемента("Consignee",СоответствиеПространстваИмен.wb);
	//	Если ТТН <> Неопределено Тогда
	//	////	Попытка
	//		ГрузополучательЕГАИС = НайтиГрузополучателяПоКлассификатору(ТТН.Грузополучатель);
	//		ЗаполнитьОрганизациюXMLДокумента(XML,СоответствиеПространстваИмен,ГрузополучательЕГАИС);
	//	////	Исключение
	//	////	КонецПопытки;
	//	Иначе
	//		ЗаполнитьОрганизациюXMLДокумента(XML,СоответствиеПространстваИмен,Строка.Ссылка.Грузополучатель);
	//	КонецЕсли;
	//	XML.ЗаписатьКонецЭлемента();
	//			
	//	XML.ЗаписатьКонецЭлемента();
	//	
	//	
	//	
	//	
	//	XML.ЗаписатьНачалоЭлемента("Content",СоответствиеПространстваИмен.wb);
	//	Для Каждого СтрокаТовар Из Строка.Ссылка.Товары Цикл
	//		//Счетчик = Счетчик + 1;
	//		XML.ЗаписатьНачалоЭлемента("Position",СоответствиеПространстваИмен.wb);			
	//		//ЗаписатьXML(XML,СтрокаТовар.ИдентификаторСтроки,"Identity",СоответствиеПространстваИмен.wb,НазначениеТипаXML.Неявное);			
	//		//ИТ-отдел 04.12.2018, хотят в качестве идентификатора порядковый номер
	//		ЗаписатьXML(XML,Формат(СтрокаТовар.НомерСтроки,"ЧЦ=3; ЧВН="),"Identity",СоответствиеПространстваИмен.wb,НазначениеТипаXML.Неявное);
	//		ЗаполнитьПродукциюXMLДокумента(XML,СоответствиеПространстваИмен,СтрокаТовар.АлкогольнаяПродукция);
	//		ЗаписатьXML(XML,XMLСтрока(СтрокаТовар.Количество),"Quantity",СоответствиеПространстваИмен.wb,НазначениеТипаXML.Неявное);
	//		ЗаписатьXML(XML,XMLСтрока(СтрокаТовар.Цена),"Price",СоответствиеПространстваИмен.wb,НазначениеТипаXML.Неявное);
	//		Если СтрокаТовар.Серия.Справка2ЕГАИС.ЕстьДиапазонНомеровАкцизныхМарок Тогда
	//			ЗаписатьXML(XML,Лев(Строка(СтрокаТовар.Серия.ДатаПроизводства),10),"Party",СоответствиеПространстваИмен.wb,НазначениеТипаXML.Неявное);
	//		Иначе
	//			ЗаписатьXML(XML,"Без марки","Party",СоответствиеПространстваИмен.wb,НазначениеТипаXML.Неявное);
	//		КонецЕсли;
	//		ЗаписатьXML(XML,СтрокаТовар.Справка2.НомерСправки1,"FARegId",СоответствиеПространстваИмен.wb,НазначениеТипаXML.Неявное);
	//		XML.ЗаписатьНачалоЭлемента("InformF2",СоответствиеПространстваИмен.wb);
	//		ЗаписатьXML(XML,СтрокаТовар.Справка2.РегистрационныйНомер,"F2RegId",СоответствиеПространстваИмен.ce,НазначениеТипаXML.Неявное);
	//		XML.ЗаписатьКонецЭлемента();  
	//		XML.ЗаписатьКонецЭлемента();  
	//	КонецЦикла;
	//	
	//	XML.ЗаписатьКонецЭлемента();
	//	
	//	
	//	//XML.ЗаписатьКонецЭлемента();
	//	XML.ЗаписатьКонецЭлемента();
	//	XML.ЗаписатьКонецЭлемента();
	//	XML.ЗаписатьКонецЭлемента();
	//	XML.Закрыть();
	//	
	//	
	//	ФайлДвоичныеДанные = Новый ДвоичныеДанные(ИмяФайла);      
	//	ФайлАдрес = ПоместитьВоВременноеХранилище(ФайлДвоичныеДанные, Новый УникальныйИдентификатор);
	//	ПолучаемыеФайлы.Добавить(Новый ОписаниеПередаваемогоФайла(Строка.Ссылка.НомерТТН + ".xml", ФайлАдрес));
	//	Попытка
	//		УдалитьФайлы(ИмяФайла);
	//	Исключение
	//	КонецПопытки;
	//КонецЦикла
КонецПроцедуры

Процедура ЗаполнитьОрганизациюXMLДокумента(XML,СоответствиеПространстваИмен,ДанныеОрганизации)
		XML.ЗаписатьНачалоЭлемента("UL",СоответствиеПространстваИмен.oref);
		ЗаписатьXML(XML,ДанныеОрганизации.Код,"ClientRegId",СоответствиеПространстваИмен.oref,НазначениеТипаXML.Неявное);
		ЗаписатьXML(XML,ДанныеОрганизации.НаименованиеПолное,"FullName",СоответствиеПространстваИмен.oref,НазначениеТипаXML.Неявное);
		ЗаписатьXML(XML,ДанныеОрганизации.Наименование,"ShortName",СоответствиеПространстваИмен.oref,НазначениеТипаXML.Неявное);
		ЗаписатьXML(XML,ДанныеОрганизации.ИНН,"INN",СоответствиеПространстваИмен.oref,НазначениеТипаXML.Неявное);
		ЗаписатьXML(XML,ДанныеОрганизации.КПП,"KPP",СоответствиеПространстваИмен.oref,НазначениеТипаXML.Неявное);
		XML.ЗаписатьНачалоЭлемента("address",СоответствиеПространстваИмен.oref);
		ЗаписатьXML(XML,ДанныеОрганизации.КодСтраны,"Country",СоответствиеПространстваИмен.oref,НазначениеТипаXML.Неявное);
		ЗаписатьXML(XML,ДанныеОрганизации.КодРегиона,"RegionCode",СоответствиеПространстваИмен.oref,НазначениеТипаXML.Неявное);
		ЗаписатьXML(XML,ДанныеОрганизации.ПредставлениеАдреса,"description",СоответствиеПространстваИмен.oref,НазначениеТипаXML.Неявное);
		XML.ЗаписатьКонецЭлемента();
		XML.ЗаписатьКонецЭлемента();	
КонецПроцедуры

Процедура ЗаполнитьПродукциюXMLДокумента(XML,СоответствиеПространстваИмен,ДанныеПродукции)
	XML.ЗаписатьНачалоЭлемента("Product",СоответствиеПространстваИмен.wb);
	Если ДанныеПродукции.ТипПродукции = Перечисления.ТипыПродукцииЕГАИС.Упакованная Тогда
		ЗаписатьXML(XML,"Packed","UnitType",СоответствиеПространстваИмен.pref,НазначениеТипаXML.Неявное);
	КонецЕсли;	
	ЗаписатьXML(XML,"АП","Type",СоответствиеПространстваИмен.pref,НазначениеТипаXML.Неявное);
	ЗаписатьXML(XML,ДанныеПродукции.НаименованиеПолное,"FullName",СоответствиеПространстваИмен.pref,НазначениеТипаXML.Неявное);
	ЗаписатьXML(XML,ДанныеПродукции.Код,"AlcCode",СоответствиеПространстваИмен.pref,НазначениеТипаXML.Неявное);
	ЗаписатьXML(XML,XMLСтрока(ДанныеПродукции.Объем),"Capacity",СоответствиеПространстваИмен.pref,НазначениеТипаXML.Неявное);
	ЗаписатьXML(XML,XMLСтрока(ДанныеПродукции.Крепость),"AlcVolume",СоответствиеПространстваИмен.pref,НазначениеТипаXML.Неявное);
	ЗаписатьXML(XML,ДанныеПродукции.ВидПродукции.Код,"ProductVCode",СоответствиеПространстваИмен.pref,НазначениеТипаXML.Неявное);
	XML.ЗаписатьНачалоЭлемента("Producer",СоответствиеПространстваИмен.pref);
	ЗаполнитьОрганизациюXMLДокумента(XML,СоответствиеПространстваИмен,ДанныеПродукции.Производитель);
	XML.ЗаписатьКонецЭлемента(); 
	XML.ЗаписатьКонецЭлемента(); 
КонецПроцедуры

//Игорь Загрузка остатков
Процедура ЗагрузитьОстатки(ФайлАдрес, Организация) Экспорт 
	ИмяФайла = ПолучитьФайл(ФайлАдрес);
	Данные = ПрочитатьXDTO(ИмяФайла);
	ЗаполнитьТТН(Данные, Организация);	
КонецПроцедуры

Функция ПолучитьИЗаполнитьСправку2БезДиапазонов(НомерСправки2,Справка1,АП,ТТН,Количество)
	НайденнаяСсылка = Справочники.Справки2ЕГАИС.НайтиПоНаименованию(НомерСправки2,Истина);
	Если НайденнаяСсылка = Справочники.Справки2ЕГАИС.ПустаяСсылка() Тогда
		Справка2 = Справочники.Справки2ЕГАИС.СоздатьЭлемент();
	Иначе
		Справка2 = НайденнаяСсылка.ПолучитьОбъект();
	КонецЕсли;	
	Справка2.АлкогольнаяПродукция = АП;
	Справка2.Наименование = НомерСправки2;
	Справка2.РегистрационныйНомер = НомерСправки2;
	Справка2.Справка1 = Справка1;
	Справка2.НомерСправки1 = Справка1.РегистрационныйНомер;
	Справка2.ДокументОснование = ТТН;
	Справка2.Количество = Количество;
	Справка2.ЕстьДиапазонНомеровАкцизныхМарок = Ложь;
	 
	Справка2.Записать();
	Возврат Справка2.Ссылка;
КонецФункции

Процедура ЗаполнитьТТН(Данные, Организация)
	
	Фирма = Справочники.КлассификаторОрганизацийЕГАИС.НайтиПоРеквизиту("Контрагент", Организация);
	
	Док = Документы.ТТНВходящаяЕГАИС.СоздатьДокумент();
	
	Док.Дата = ТекущаяДата();
	Док.ВидОперации = Перечисления.ВидыОперацийТТНВходящейЕГАИС.ПриходнаяНакладная;
	Док.Организация = Организация;
	Док.НомерТТН = "ОСТ-" + Данные.RestDate;
	Док.ДатаТТН = ТекущаяДата();
	Док.ДатаОтгрузки = ТекущаяДата();
	Док.Грузополучатель = Фирма;
	Док.Грузоотправитель = Фирма;
	Док.ТорговыйОбъект = Фирма.ТорговыйОбъект;
	Док.ДатаРегистрацииДвижений = ТекущаяДата();
	Док.Упакована = Ложь;
	Док.ЕстьРасхождения = Ложь;
	Док.ФорматОбмена = Перечисления.ФорматыОбменаЕГАИС.V3;
	Док.СтатусПроверкиИПодбора = Перечисления.СтатусыПроверкиИПодбораЕГАИС.Завершено;
	
	Док.Товары.Очистить();
	
	Если ТипЗнч(Данные.Rest) = Тип("СписокXDTO") Тогда
		Для Каждого Строка Из Данные.Rest Цикл
			Если Строка.Product.Type = "АП" Тогда
				НоваяСтрока = Док.Товары.Добавить();
				АП = ЗаполнитьНоменклатуру(Строка.Product);
				НоваяСтрока.АлкогольнаяПродукция = АП;
				НоваяСтрока.Количество = Число(Строка.Quantity);
				НоваяСтрока.КоличествоФакт = Число(Строка.Quantity);
				//Попытка
				//	НоваяСтрока.НомерПартии = Строка.Party;
				//Исключение
				//	Сообщить("Партия для " + СокрЛП(АП) + " не указана", СтатусСообщения.Важное);
				//КонецПопытки;
				ДатаРозливаСтр = СтрЗаменить(Строка.BottlingDate , "-","");
				ДатаРозлива = Дата(ДатаРозливаСтр); 
				НоваяСтрока.НомерПартии = Формат(ДатаРозлива, "ДФ=dd.MM.yyyy");
				Справка1 = ПолучитьИЗаполнитьСправку1(Строка.InformF1RegId, ДатаРозлива, АП); 
				НоваяСтрока.Справка2 = ПолучитьИЗаполнитьСправку2БезДиапазонов(Строка.InformF2RegId,Справка1,АП,Док,Строка.Quantity);
				НоваяСтрока.Серия = Справочники.СерииНоменклатуры.ПустаяСсылка(); 
				НоваяСтрока.Номенклатура = ЗаполнитьНоменклатуруПоАПВСТроке(НоваяСтрока);
				НоваяСтрока.НомерСправки2Поставщика = НоваяСтрока.Справка2.РегистрационныйНомер;
				
			КонецЕсли;
		КонецЦикла;
	Иначе
		Строка = Данные.Rest;
		Если Строка.Product.Type = "АП" Тогда
			НоваяСтрока = Док.Товары.Добавить();
			АП = ЗаполнитьНоменклатуру(Строка.Product);
			НоваяСтрока.АлкогольнаяПродукция = АП;
			НоваяСтрока.Количество = Число(Строка.Quantity);
			НоваяСтрока.КоличествоФакт = Число(Строка.Quantity);
			ДатаРозливаСтр = СтрЗаменить(Строка.BottlingDate , "-","");
			ДатаРозлива = Дата(ДатаРозливаСтр);
			НоваяСтрока.НомерПартии = Формат(ДатаРозлива, "ДФ=dd.MM.yyyy");
			Справка1 = ПолучитьИЗаполнитьСправку1(Строка.InformF1RegId, ДатаРозлива, АП); 
			НоваяСтрока.Справка2 = ПолучитьИЗаполнитьСправку2БезДиапазонов(Строка.InformF2RegId,Справка1,АП,Док,Строка.Quantity); 
			НоваяСтрока.Серия = Справочники.СерииНоменклатуры.ПустаяСсылка();
			НоваяСтрока.Номенклатура = ЗаполнитьНоменклатуруПоАПВСТроке(НоваяСтрока);
			НоваяСтрока.НомерСправки2Поставщика = НоваяСтрока.Справка2.РегистрационныйНомер;		
		КонецЕсли;  		
	КонецЕсли;
	
	ЗаполнитьРезультатыПроверки(Док);
	Док.Записать(РежимЗаписиДокумента.Запись);
	ЗаполнитьСтатусДокументаПринят(Док.Ссылка);
	Док.Записать(РежимЗаписиДокумента.Проведение); 
	
	Сообщить("Остатки загружены.");
КонецПроцедуры

//Загрузка диапазонов
Процедура ЗагрузитьДиапазоны(ФайлАдрес)
	
	ИмяФайла = ПолучитьФайл(ФайлАдрес);
	Данные = ПрочитатьXDTO(ИмяФайла);
	
	
	
КонецПроцедуры

//Игорь Выгрузка списания
Процедура ЗаполнитьТЧАктСписания(Повторно) Экспорт
	
	ЭтотОбъект.АктыСписания.Очистить();
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	               |	СтатусыДокументовЕГАИС.Документ.Ссылка КАК ДокументСсылка
	               |ИЗ
	               |	РегистрСведений.СтатусыДокументовЕГАИС КАК СтатусыДокументовЕГАИС
	               |ГДЕ
	               |	СтатусыДокументовЕГАИС.Документ ССЫЛКА Документ.АктСписанияЕГАИС
	               |	И СтатусыДокументовЕГАИС.Документ.Дата МЕЖДУ &Нач И &Кон
	               |	И СтатусыДокументовЕГАИС.Статус = &Статус
	               |	И СтатусыДокументовЕГАИС.Документ.ПометкаУдаления = ЛОЖЬ
	               |	И СтатусыДокументовЕГАИС.Документ.Проведен = ИСТИНА";
	Запрос.УстановитьПараметр("Нач", НачалоДня(ЭтотОбъект.ПериодС));
	Запрос.УстановитьПараметр("Кон", КонецДня(ЭтотОбъект.ПериодПо));
	Если Повторно Тогда
		Запрос.УстановитьПараметр("Статус", Перечисления.СтатусыОбработкиАктаСписанияЕГАИС.ПроведенЕГАИС);
	Иначе		
		Запрос.УстановитьПараметр("Статус", Перечисления.СтатусыОбработкиАктаСписанияЕГАИС.Черновик);
	КонецЕсли;
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Пока Выборка.Следующий() Цикл
		НоваяСтрока = ЭтотОбъект.АктыСписания.Добавить();
		НоваяСтрока.АктСписания = Выборка.ДокументСсылка;			
		НоваяСтрока.Загружать = Истина;
	КонецЦикла;	
	
КонецПроцедуры

Процедура ЗаполнитьТЧАктПостановкиНаБаланс(Повторно) Экспорт
	
	ЭтотОбъект.АктыПостановкиНаБаланс.Очистить();
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	               |	СтатусыДокументовЕГАИС.Документ.Ссылка КАК ДокументСсылка
	               |ИЗ
	               |	РегистрСведений.СтатусыДокументовЕГАИС КАК СтатусыДокументовЕГАИС
	               |ГДЕ
	               |	СтатусыДокументовЕГАИС.Документ ССЫЛКА Документ.АктПостановкиНаБалансЕГАИС
	               |	И СтатусыДокументовЕГАИС.Документ.Дата МЕЖДУ &Нач И &Кон
	               |	И СтатусыДокументовЕГАИС.Статус = &Статус
	               |	И СтатусыДокументовЕГАИС.Документ.ПометкаУдаления = ЛОЖЬ";
	Запрос.УстановитьПараметр("Нач", НачалоДня(ЭтотОбъект.ПериодС));
	Запрос.УстановитьПараметр("Кон", КонецДня(ЭтотОбъект.ПериодПо));
	Если Повторно Тогда
		Запрос.УстановитьПараметр("Статус", Перечисления.СтатусыОбработкиАктаПостановкиНаБалансЕГАИС.ПроведенЕГАИС);
	Иначе
		Запрос.УстановитьПараметр("Статус", Перечисления.СтатусыОбработкиАктаПостановкиНаБалансЕГАИС.Черновик);
	КонецЕсли;
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Пока Выборка.Следующий() Цикл
		НоваяСтрока = ЭтотОбъект.АктыПостановкиНаБаланс.Добавить();
		НоваяСтрока.АктПостановкиНаБаланс = Выборка.ДокументСсылка;			
		НоваяСтрока.Загружать = Истина;
	КонецЦикла;	
	
КонецПроцедуры

Процедура ВыгрузитьАктПостановкиНаБаланс(ПолучаемыеФайлы, СписокДокументов) Экспорт
	
	//ПолучаемыеФайлы = Новый Массив;
	
	СоответствиеПространстваИмен = Новый Структура;
	СоответствиеПространстваИмен.Вставить("ns","http://fsrar.ru/WEGAIS/WB_DOC_SINGLE_01");
	СоответствиеПространстваИмен.Вставить("xsi","http://www.w3.org/2001/XMLSchema-instance");
	СоответствиеПространстваИмен.Вставить("ach","http://fsrar.ru/WEGAIS/ActChargeOn_v2");
	СоответствиеПространстваИмен.Вставить("aif","http://fsrar.ru/WEGAIS/ActInventoryF1F2Info");
	СоответствиеПространстваИмен.Вставить("pref","http://fsrar.ru/WEGAIS/ProductRef_v2");
	СоответствиеПространстваИмен.Вставить("oref","http://fsrar.ru/WEGAIS/ClientRef_v2");
	
	Для Каждого Док Из СписокДокументов Цикл
		
		Акт = Док.АктПостановкиНаБаланс.ПолучитьОбъект();
		ИмяФайла = ПолучитьИмяВременногоФайла("xml");
		
		XML = Новый ЗаписьXML;                   
		XML.ОткрытьФайл(ИмяФайла);                
		//XML.ОткрытьФайл(ФайлАдрес + "\" + "Акт постановки на баланс №" + Акт.Ссылка.Номер + "от" + СокрЛП(Формат(Акт.Ссылка.Дата, "ДФ=yyyy-MM-dd")) + ".xml");
		XML.ЗаписатьОбъявлениеXML();
		XML.ЗаписатьНачалоЭлемента("Documents",СоответствиеПространстваИмен.ns);
		XML.ЗаписатьАтрибут("Version","1.0");
		XML.ЗаписатьСоответствиеПространстваИмен("ns",СоответствиеПространстваИмен.ns);
		XML.ЗаписатьСоответствиеПространстваИмен("xsi",СоответствиеПространстваИмен.xsi);
		XML.ЗаписатьСоответствиеПространстваИмен("ach",СоответствиеПространстваИмен.ach);
		XML.ЗаписатьСоответствиеПространстваИмен("aif",СоответствиеПространстваИмен.aif);
		XML.ЗаписатьСоответствиеПространстваИмен("pref",СоответствиеПространстваИмен.pref);
		XML.ЗаписатьСоответствиеПространстваИмен("oref",СоответствиеПространстваИмен.oref);
		XML.ЗаписатьНачалоЭлемента("Owner",СоответствиеПространстваИмен.ns);
		ЗаписатьXML(XML, Акт.ОрганизацияЕГАИС.Код, "FSRAR_ID",СоответствиеПространстваИмен.ns,НазначениеТипаXML.Неявное);	
		XML.ЗаписатьКонецЭлемента();
		XML.ЗаписатьНачалоЭлемента("Document",СоответствиеПространстваИмен.ns);
		XML.ЗаписатьНачалоЭлемента("ActChargeOn_v2",СоответствиеПространстваИмен.ns);
		ЗаписатьXML(XML, Акт.Идентификатор, "Identity",СоответствиеПространстваИмен.ach,НазначениеТипаXML.Неявное);	
		XML.ЗаписатьНачалоЭлемента("Header",СоответствиеПространстваИмен.ach);
			ЗаписатьXML(XML, Акт.Номер, "Number",СоответствиеПространстваИмен.ach,НазначениеТипаXML.Неявное);
			ЗаписатьXML(XML, Формат(Акт.Дата, "ДФ=yyyy-MM-dd"), "ActDate",СоответствиеПространстваИмен.ach,НазначениеТипаXML.Неявное);
			ЗаписатьXML(XML, Акт.ПричинаПостановкиНаБаланс, "TypeChargeOn",СоответствиеПространстваИмен.ach,НазначениеТипаXML.Неявное);
			ЗаписатьXML(XML, Акт.Комментарий, "Note",СоответствиеПространстваИмен.ach,НазначениеТипаXML.Неявное);
		XML.ЗаписатьКонецЭлемента();   		
		XML.ЗаписатьНачалоЭлемента("Content",СоответствиеПространстваИмен.ach);
		Для Каждого Элемент Из Акт.Товары Цикл
			#Область ПозицияАch
			XML.ЗаписатьНачалоЭлемента("Position",СоответствиеПространстваИмен.ach);
			ЗаписатьXML(XML, Элемент.ИдентификаторСтроки, "Identity",СоответствиеПространстваИмен.ach,НазначениеТипаXML.Неявное);		
			XML.ЗаписатьНачалоЭлемента("Product",СоответствиеПространстваИмен.ach);
			ЗаписатьXML(XML, "Unpacked", "UnitType",СоответствиеПространстваИмен.pref,НазначениеТипаXML.Неявное);//Упаковка?	
			ЗаписатьXML(XML, "АП", "Type",СоответствиеПространстваИмен.pref,НазначениеТипаXML.Неявное);//Будет ли сырье?
			ЗаписатьXML(XML, Элемент.АлкогольнаяПродукция.НаименованиеПолное, "FullName",СоответствиеПространстваИмен.pref,НазначениеТипаXML.Неявное);
			ЗаписатьXML(XML, Элемент.АлкогольнаяПродукция.Код, "AlcCode",СоответствиеПространстваИмен.pref,НазначениеТипаXML.Неявное);
			ЗаписатьXML(XML, Элемент.АлкогольнаяПродукция.Объем, "AlcVolume",СоответствиеПространстваИмен.pref,НазначениеТипаXML.Неявное);
			ЗаписатьXML(XML, Элемент.АлкогольнаяПродукция.ВидПродукции.Код, "ProductVCode",СоответствиеПространстваИмен.pref,НазначениеТипаXML.Неявное);
			#Область ПроизводительРref
			XML.ЗаписатьНачалоЭлемента("Producer",СоответствиеПространстваИмен.pref);
			#Область ПроизводительОref
			XML.ЗаписатьНачалоЭлемента("UL",СоответствиеПространстваИмен.oref);
			ЗаписатьXML(XML, Акт.ОрганизацияЕГАИС.Код, "ClientRegId",СоответствиеПространстваИмен.oref,НазначениеТипаXML.Неявное);
			ЗаписатьXML(XML, Акт.ОрганизацияЕГАИС.НаименованиеПолное, "FullName",СоответствиеПространстваИмен.oref,НазначениеТипаXML.Неявное);
			ЗаписатьXML(XML, Акт.ОрганизацияЕГАИС.Наименование, "ShortName",СоответствиеПространстваИмен.oref,НазначениеТипаXML.Неявное);
			ЗаписатьXML(XML, Акт.ОрганизацияЕГАИС.ИНН, "INN",СоответствиеПространстваИмен.oref,НазначениеТипаXML.Неявное);
			ЗаписатьXML(XML, Акт.ОрганизацияЕГАИС.КПП, "KPP",СоответствиеПространстваИмен.oref,НазначениеТипаXML.Неявное);
			XML.ЗаписатьНачалоЭлемента("address",СоответствиеПространстваИмен.oref);
			ЗаписатьXML(XML, Акт.ОрганизацияЕГАИС.КодСтраны, "Country",СоответствиеПространстваИмен.oref,НазначениеТипаXML.Неявное);
			ЗаписатьXML(XML, Акт.ОрганизацияЕГАИС.КодРегиона, "RegionCode",СоответствиеПространстваИмен.oref,НазначениеТипаXML.Неявное);
			ЗаписатьXML(XML, Акт.ОрганизацияЕГАИС.ПредставлениеАдреса, "description",СоответствиеПространстваИмен.oref,НазначениеТипаXML.Неявное);
			XML.ЗаписатьКонецЭлемента();								
			XML.ЗаписатьКонецЭлемента();
			#КонецОбласти
			XML.ЗаписатьКонецЭлемента();
			#КонецОбласти
			XML.ЗаписатьКонецЭлемента(); 
			ЗаписатьXML(XML, Элемент.Количество, "Quantity",СоответствиеПространстваИмен.ach,НазначениеТипаXML.Неявное);
			#Область МаркаАch
			XML.ЗаписатьНачалоЭлемента("InformF1F2",СоответствиеПространстваИмен.ach);
			XML.ЗаписатьНачалоЭлемента("InformF1F2Reg",СоответствиеПространстваИмен.ach);
			XML.ЗаписатьНачалоЭлемента("InformF1",СоответствиеПространстваИмен.ach);
			#Область МаркаАif
			ЗаписатьXML(XML, Элемент.КоличествоПоСправке1, "Quantity",СоответствиеПространстваИмен.aif,НазначениеТипаXML.Неявное);
			ЗаписатьXML(XML, СокрЛП(Формат(Элемент.ДатаРозлива, "ДФ=yyyy-MM-dd")), "BottlingDate",СоответствиеПространстваИмен.aif,НазначениеТипаXML.Неявное); 
			ЗаписатьXML(XML, Элемент.НомерТТН, "TTNNumber",СоответствиеПространстваИмен.aif,НазначениеТипаXML.Неявное);
			ЗаписатьXML(XML, Формат(Элемент.ДатаТТН, "ДФ=yyyy-MM-dd"), "TTNDate",СоответствиеПространстваИмен.aif,НазначениеТипаXML.Неявное);
			#КонецОбласти
			XML.ЗаписатьКонецЭлемента();
			XML.ЗаписатьКонецЭлемента();
			XML.ЗаписатьКонецЭлемента();
			#КонецОбласти
			XML.ЗаписатьКонецЭлемента();
			#КонецОбласти
		КонецЦикла;
		XML.ЗаписатьКонецЭлемента();	
		
		XML.ЗаписатьКонецЭлемента();
		XML.ЗаписатьКонецЭлемента();
		XML.ЗаписатьКонецЭлемента();
		XML.Закрыть();
		
		ЗаполнитьСтатусДокументаПринят(Док.АктПостановкиНаБаланс);
		
		ФайлДвоичныеДанные = Новый ДвоичныеДанные(ИмяФайла);      
		ФайлАдрес = ПоместитьВоВременноеХранилище(ФайлДвоичныеДанные, Новый УникальныйИдентификатор);
		ПолучаемыеФайлы.Добавить(Новый ОписаниеПередаваемогоФайла(СокрЛП(Акт.Номер) + "от" + СокрЛП(Акт.Дата) + ".xml", ФайлАдрес));
		Попытка
			УдалитьФайлы(ИмяФайла);
		Исключение
		КонецПопытки;

	КонецЦикла	
КонецПроцедуры

Процедура ВыгрузитьАктСписания(ПолучаемыеФайлы, СписокДокументов) Экспорт
	Для Каждого Строка Из СписокДокументов Цикл
		ТекДок = Строка.АктСписания;
		Сообщение = Документы.АктСписанияЕГАИС.АктСписанияЕГАИСXML(ТекДок);
		
		ИмяФайла = ПолучитьИмяВременногоФайла("xml");
		XML = Новый ЗаписьXML;                   
		XML.ОткрытьФайл(ИмяФайла);
		XML.ЗаписатьБезОбработки(Сообщение[0].ТекстСообщенияXML);
		XML.Закрыть();
		ЗаполнитьСтатусДокументаПринят(ТекДок);
		
		ФайлДвоичныеДанные = Новый ДвоичныеДанные(ИмяФайла);      
		ФайлАдрес = ПоместитьВоВременноеХранилище(ФайлДвоичныеДанные, Новый УникальныйИдентификатор);
		ПолучаемыеФайлы.Добавить(Новый ОписаниеПередаваемогоФайла(СокрЛП(ТекДок.Номер) + "от" + СокрЛП(Лев(Строка(ТекДок.Дата),10)) + ".xml", ФайлАдрес));
		Попытка
			УдалитьФайлы(ИмяФайла);
		Исключение
		КонецПопытки;

	КонецЦикла;
	
	//ПолучаемыеФайлы = Новый Массив;
	
	//СоответствиеПространстваИмен = Новый Структура;
	//СоответствиеПространстваИмен.Вставить("ns","http://fsrar.ru/WEGAIS/WB_DOC_SINGLE_01");
	//СоответствиеПространстваИмен.Вставить("xsi","http://www.w3.org/2001/XMLSchema-instance");
	//СоответствиеПространстваИмен.Вставить("awr","http://fsrar.ru/WEGAIS/ActWriteOff_v2");
	//СоответствиеПространстваИмен.Вставить("pref","http://fsrar.ru/WEGAIS/ProductRef_v2");
	//	
	//Для Каждого Док Из СписокДокументов Цикл
	//	
	//	Акт = Док.АктСписания.ПолучитьОбъект();
	//	ИмяФайла = ПолучитьИмяВременногоФайла("xml");
	//	
	//	Акт = Док.АктСписания.ПолучитьОбъект();
	//	XML = Новый ЗаписьXML;                   
	//	XML.ОткрытьФайл(ИмяФайла); 
	//	//XML.ОткрытьФайл(ФайлАдрес + "\" + "Акт списания №" + Акт.Ссылка.Номер + "от" + СокрЛП(Формат(Акт.Ссылка.Дата, "ДФ=yyyy-MM-dd")) + ".xml");
	//	XML.ЗаписатьОбъявлениеXML();
	//	XML.ЗаписатьНачалоЭлемента("Documents",СоответствиеПространстваИмен.ns);
	//	XML.ЗаписатьАтрибут("Version","1.0");
	//	XML.ЗаписатьСоответствиеПространстваИмен("ns",СоответствиеПространстваИмен.ns);
	//	XML.ЗаписатьСоответствиеПространстваИмен("xsi",СоответствиеПространстваИмен.xsi);
	//	XML.ЗаписатьСоответствиеПространстваИмен("awr",СоответствиеПространстваИмен.awr);
	//	XML.ЗаписатьСоответствиеПространстваИмен("pref",СоответствиеПространстваИмен.pref);
	//	XML.ЗаписатьНачалоЭлемента("Owner",СоответствиеПространстваИмен.ns);
	//	ЗаписатьXML(XML, Акт.ОрганизацияЕГАИС.Код, "FSRAR_ID",СоответствиеПространстваИмен.ns,НазначениеТипаXML.Неявное);	
	//	XML.ЗаписатьКонецЭлемента();
	//	XML.ЗаписатьНачалоЭлемента("Document",СоответствиеПространстваИмен.ns);
	//	XML.ЗаписатьНачалоЭлемента("ActWriteOff_v2",СоответствиеПространстваИмен.ns);
	//		ЗаписатьXML(XML, Акт.Идентификатор, "Identity",СоответствиеПространстваИмен.awr,НазначениеТипаXML.Неявное);	
	//	XML.ЗаписатьНачалоЭлемента("Header",СоответствиеПространстваИмен.awr);
	//		ЗаписатьXML(XML, Акт.Номер, "ActNumber",СоответствиеПространстваИмен.awr,НазначениеТипаXML.Неявное);
	//		ЗаписатьXML(XML, Формат(Акт.Дата, "ДФ=yyyy-MM-dd"), "ActDate",СоответствиеПространстваИмен.awr,НазначениеТипаXML.Неявное);
	//		ЗаписатьXML(XML, Акт.ПричинаСписания, "TypeWriteOff",СоответствиеПространстваИмен.awr,НазначениеТипаXML.Неявное);
	//		ЗаписатьXML(XML, Акт.Комментарий, "Note",СоответствиеПространстваИмен.awr,НазначениеТипаXML.Неявное);
	//	XML.ЗаписатьКонецЭлемента();
	//	XML.ЗаписатьНачалоЭлемента("Content",СоответствиеПространстваИмен.awr);
	//	Для Каждого Элемент Из Акт.Товары Цикл
	//		XML.ЗаписатьНачалоЭлемента("Position",СоответствиеПространстваИмен.awr);
	//			ЗаписатьXML(XML, Элемент.ИдентификаторСтроки, "Identity",СоответствиеПространстваИмен.awr,НазначениеТипаXML.Неявное);		 
	//			ЗаписатьXML(XML, Элемент.Количество, "Quantity",СоответствиеПространстваИмен.awr,НазначениеТипаXML.Неявное);	
	//			XML.ЗаписатьНачалоЭлемента("InformF1F2",СоответствиеПространстваИмен.awr);
	//				XML.ЗаписатьНачалоЭлемента("InformF2",СоответствиеПространстваИмен.awr);
	//					ЗаписатьXML(XML, СокрЛП(Элемент.Справка2), "F2RegId",СоответствиеПространстваИмен.pref,НазначениеТипаXML.Неявное);
	//				XML.ЗаписатьКонецЭлемента();
	//			XML.ЗаписатьКонецЭлемента();
	//		XML.ЗаписатьКонецЭлемента();
	//	КонецЦикла;		
	//	XML.ЗаписатьКонецЭлемента();
	//	XML.ЗаписатьКонецЭлемента();
	//	XML.ЗаписатьКонецЭлемента();
	//	XML.ЗаписатьКонецЭлемента();
	//	XML.Закрыть();
	//	ЗаполнитьСтатусДокументаПринят(Док.АктСписания);
	//	
	//	ФайлДвоичныеДанные = Новый ДвоичныеДанные(ИмяФайла);      
	//	ФайлАдрес = ПоместитьВоВременноеХранилище(ФайлДвоичныеДанные, Новый УникальныйИдентификатор);
	//	ПолучаемыеФайлы.Добавить(Новый ОписаниеПередаваемогоФайла(СокрЛП(Акт.Номер) + "от" + СокрЛП(Акт.Дата) + ".xml", ФайлАдрес));
	//	Попытка
	//		УдалитьФайлы(ИмяФайла);
	//	Исключение
	//	КонецПопытки;

	//	
	//КонецЦикла	
КонецПроцедуры

Процедура ЗагрузитьИСоздатьУпаковки(ФайлАдрес) Экспорт
	Сообщить("Начало " + ТекущаяДата());
	ЗагруженыеУпаковки.Очистить();
	ИмяФайла = ПолучитьФайл(ФайлАдрес);
	Данные = ПрочитатьXDTO(ИмяФайла);
	СоздатьУпаковки(Данные);	
	ЗагруженыеУпаковки.Очистить();
	Сообщить("Окончание " + ТекущаяДата());
КонецПроцедуры	

Процедура СоздатьУпаковки(Данные)
	НачатьТранзакцию();
	Если Данные.Свойства().Получить("Box") <> Неопределено Тогда 
		Если Не ТипЗнч(Данные.Box) = Тип("СписокXDTO") Тогда
			ЗагружаемыеКороба = Новый Массив;
			ЗагружаемыеКороба.Добавить(Данные.Box);
		Иначе	
			ЗагружаемыеКороба = Данные.Box;
		КонецЕсли;	
		
		ОбработатьКороба(ЗагружаемыеКороба);
	КонецЕсли;
	
	Если Данные.Свойства().Получить("Pallet") <> Неопределено Тогда 	
		Если Не ТипЗнч(Данные.Pallet) = Тип("СписокXDTO") Тогда
			ЗагружаемыеПаллеты = Новый Массив;
			ЗагружаемыеПаллеты.Добавить(Данные.Pallet);
		Иначе	
			ЗагружаемыеПаллеты = Данные.Pallet;
		КонецЕсли;
		
		Для Каждого ДанныеПаллеты Из ЗагружаемыеПаллеты Цикл
			ПаллетаОбъект = ПолучитьКороб(ДанныеПаллеты);
			Если Не ТипЗнч(ДанныеПаллеты.Boxes.Box) = Тип("СписокXDTO") Тогда
				ЗагружаемыеКороба = Новый Массив;
				ЗагружаемыеКороба.Добавить(ДанныеПаллеты.Boxes.Box);
			Иначе	
				ЗагружаемыеКороба = ДанныеПаллеты.Boxes.Box;
			КонецЕсли;	
			ТаблицаНоменклатуры = ОбработатьКороба(ЗагружаемыеКороба);
			Если ТаблицаНоменклатуры.Количество() > 1 Тогда
				ПаллетаОбъект.ТипУпаковки = Перечисления.ТипыУпаковок.МультитоварнаяУпаковка;
				ПаллетаОбъект.Номенклатура = Справочники.Номенклатура.ПустаяСсылка();
			ИначеЕсли ТаблицаНоменклатуры.Количество() = 1 Тогда
				ПаллетаОбъект.Номенклатура = ТаблицаНоменклатуры[0].Номенклатура;
			Иначе
				ПаллетаОбъект.Номенклатура = Справочники.Номенклатура.ПустаяСсылка();	
			КонецЕсли;
			ПаллетаОбъект.ВложенныеШтрихкоды.Очистить();
			Для Каждого КоробВложеный Из ЗагружаемыеКороба Цикл
				СпрШК = Справочники.ШтрихкодыУпаковокТоваров;
				Отбор = Новый Структура("ЗначениеШтрихкода");
				Отбор.ЗначениеШтрихкода = КоробВложеный.Barcode;
				Выборка = СпрШК.Выбрать(,,Отбор);
				Если Выборка.Следующий()  Тогда
					НоваяСтрока = ПаллетаОбъект.ВложенныеШтрихкоды.Добавить();
					НоваяСтрока.Штрихкод = Выборка.Ссылка;
					//УдалитьМаркиИзДругихКоробов(Выборка.Ссылка,ПаллетаОбъект.Ссылка);
				КонецЕсли;	
			КонецЦикла;	
			ДанныеДляВычисления = Справочники.ШтрихкодыУпаковокТоваров.ДанныеДляВычисленияХешСуммы(ПаллетаОбъект);
			ПаллетаОбъект.ХешСумма = Справочники.ШтрихкодыУпаковокТоваров.ХешСуммаСодержимогоУпаковки(ДанныеДляВычисления);
			ПаллетаОбъект.Записать();
			НоваяСтрокаУпаковки = ЗагруженыеУпаковки.Добавить();
			НоваяСтрокаУпаковки.Ссылка = ПаллетаОбъект.Ссылка;
		КонецЦикла;	
	КонецЕсли;
	УдалитьМарки();
	ЗафиксироватьТранзакцию();
КонецПроцедуры

Процедура УдалитьМарки()
	СписокУпаковок = ЗагруженыеУпаковки.ВыгрузитьКолонку("Ссылка");
	//{{КОНСТРУКТОР_ЗАПРОСА_С_ОБРАБОТКОЙ_РЕЗУЛЬТАТА
	// Данный фрагмент построен конструктором.
	// При повторном использовании конструктора, внесенные вручную изменения будут утеряны!!!
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ШтрихкодыУпаковокТоваровВложенныеШтрихкоды.Штрихкод КАК Штрихкод
		|ПОМЕСТИТЬ Марки
		|ИЗ
		|	Справочник.ШтрихкодыУпаковокТоваров.ВложенныеШтрихкоды КАК ШтрихкодыУпаковокТоваровВложенныеШтрихкоды
		|ГДЕ
		|	ШтрихкодыУпаковокТоваровВложенныеШтрихкоды.Ссылка В(&СписокУпаковок)
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ШтрихкодыУпаковокТоваровВложенныеШтрихкоды.Ссылка КАК Ссылка,
		|	ШтрихкодыУпаковокТоваровВложенныеШтрихкоды.Штрихкод КАК Штрихкод
		|ИЗ
		|	Справочник.ШтрихкодыУпаковокТоваров.ВложенныеШтрихкоды КАК ШтрихкодыУпаковокТоваровВложенныеШтрихкоды
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Марки КАК Марки
		|		ПО ШтрихкодыУпаковокТоваровВложенныеШтрихкоды.Штрихкод = Марки.Штрихкод
		|ГДЕ
		|	НЕ ШтрихкодыУпаковокТоваровВложенныеШтрихкоды.Ссылка В (&СписокУпаковок)
		|ИТОГИ ПО
		|	Ссылка";
	
	Запрос.УстановитьПараметр("СписокУпаковок", СписокУпаковок);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	ВыборкаСсылка = РезультатЗапроса.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	
	Пока ВыборкаСсылка.Следующий() Цикл
		// Вставить обработку выборки ВыборкаСсылка
	    СтарыйКороб = ВыборкаСсылка.Ссылка.ПолучитьОбъект();
		СтарыйКороб.ОбменДанными.Загрузка = Истина;

		ВыборкаДетальныеЗаписи = ВыборкаСсылка.Выбрать();
	
		Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
			ПараметрыОтбора = Новый Структура;
			ПараметрыОтбора.Вставить("Штрихкод", ВыборкаДетальныеЗаписи.Штрихкод);
			НайденныеСтроки = СтарыйКороб.ВложенныеШтрихкоды.НайтиСтроки(ПараметрыОтбора);
			Для Каждого Строка Из НайденныеСтроки Цикл
				СтарыйКороб.ВложенныеШтрихкоды.Удалить(Строка);	
			КонецЦикла;	
		КонецЦикла;
		СтарыйКороб.Записать();
	КонецЦикла;
	
	//}}КОНСТРУКТОР_ЗАПРОСА_С_ОБРАБОТКОЙ_РЕЗУЛЬТАТА
	
КонецПроцедуры	

Функция ПолучитьКороб(ДанныеКороба)
	СпрШК = Справочники.ШтрихкодыУпаковокТоваров;
	Отбор = Новый Структура("ЗначениеШтрихкода");
	Отбор.ЗначениеШтрихкода = ДанныеКороба.Barcode;
	Выборка = СпрШК.Выбрать(,,Отбор);
	Если Выборка.Следующий()  Тогда
		ШК = Выборка.ПолучитьОбъект();
	Иначе	
		ШК = Справочники.ШтрихкодыУпаковокТоваров.СоздатьЭлемент();
	КонецЕсли;
	Шк.ОбменДанными.Загрузка = Истина;
	ШК.ДатаУпаковки = XMLЗначение(Тип("Дата"),ДанныеКороба.PackingDate);
	ШК.ЗначениеШтрихкода =  ДанныеКороба.Barcode;
	ШК.ТипУпаковки = Перечисления.ТипыУпаковок.МонотоварнаяУпаковка;
	Шк.ТипШтрихкода = Перечисления.ТипыШтрихкодов.Code128;
	Шк.Записать();
	Возврат ШК;
КонецФункции
	
Процедура УдалитьМаркиИзДругихКоробов(ШК,Короб)
	//{{КОНСТРУКТОР_ЗАПРОСА_С_ОБРАБОТКОЙ_РЕЗУЛЬТАТА
	// Данный фрагмент построен конструктором.
	// При повторном использовании конструктора, внесенные вручную изменения будут утеряны!!!
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ШтрихкодыУпаковокТоваровВложенныеШтрихкоды.Ссылка КАК Ссылка
		|ИЗ
		|	Справочник.ШтрихкодыУпаковокТоваров.ВложенныеШтрихкоды КАК ШтрихкодыУпаковокТоваровВложенныеШтрихкоды
		|ГДЕ
		|	ШтрихкодыУпаковокТоваровВложенныеШтрихкоды.Ссылка <> &Ссылка
		|	И ШтрихкодыУпаковокТоваровВложенныеШтрихкоды.Штрихкод = &Штрихкод";
	
	Запрос.УстановитьПараметр("Ссылка", Короб);
	Запрос.УстановитьПараметр("Штрихкод", ШК);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	
	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
		СтарыйКороб = ВыборкаДетальныеЗаписи.ПолучитьОбъект();
		СтарыйКороб.ОбменДанными.Загрузка = Истина;
		ПараметрыОтбора = Новый Структура;
		ПараметрыОтбора.Вставить("Штрихкод", ШК);
		НайденныеСтроки = СтарыйКороб.ВложенныеШтрихкоды.НайтиСтроки(ПараметрыОтбора);
		Для Каждого Строка Из НайденныеСтроки Цикл
			СтарыйКороб.ВложенныеШтрихкоды.Удалить(Строка);	
		КонецЦикла;	
		СтарыйКороб.Записать();
	КонецЦикла;
	
	//}}КОНСТРУКТОР_ЗАПРОСА_С_ОБРАБОТКОЙ_РЕЗУЛЬТАТА
КонецПроцедуры

Функция ОбработатьКороба(ЗагружаемыеКороба)
	ВложеннаяНоменклатураОбщая = Новый ТаблицаЗначений;
	ВложеннаяНоменклатураОбщая.Колонки.Добавить("Номенклатура",Новый ОписаниеТипов("СправочникСсылка.Номенклатура"));
	Для Каждого ДанныеКороба Из ЗагружаемыеКороба Цикл
		КоробОбъект = ПолучитьКороб(ДанныеКороба);
		Если Не ТипЗнч(ДанныеКороба.MarkCodes.Code) = Тип("СписокXDTO") Тогда
			МаркиКороба = Новый Массив;
			МаркиКороба.Добавить(ДанныеКороба.MarkCodes.Code);
		Иначе	
			МаркиКороба = ДанныеКороба.MarkCodes.Code;
		КонецЕсли;
		КоробОбъект.ВложенныеШтрихкоды.Очистить();
		ВложеннаяНоменклатура = Новый ТаблицаЗначений;
		ВложеннаяНоменклатура.Колонки.Добавить("Номенклатура",Новый ОписаниеТипов("СправочникСсылка.Номенклатура"));
		Для Каждого МаркаВложеная Из МаркиКороба Цикл
			СпрШК = Справочники.ШтрихкодыУпаковокТоваров;
			Отбор = Новый Структура("ЗначениеШтрихкода");
			Отбор.ЗначениеШтрихкода = МаркаВложеная;
			Выборка = СпрШК.Выбрать(,,Отбор);
			Если Выборка.Следующий()  Тогда
				НоваяСтрока = КоробОбъект.ВложенныеШтрихкоды.Добавить();
				НоваяСтрока.Штрихкод = Выборка.Ссылка;
				СтрокаВложенаяНоменклатура = ВложеннаяНоменклатура.Добавить();
				СтрокаВложенаяНоменклатура.Номенклатура = Выборка.Номенклатура;
				//УдалитьМаркиИзДругихКоробов(Выборка.Ссылка,КоробОбъект.Ссылка);
			КонецЕсли;	
		КонецЦикла;	
		ВложеннаяНоменклатура.Свернуть("Номенклатура");
		Если ВложеннаяНоменклатура.Количество() > 1 Тогда
			КоробОбъект.ТипУпаковки = Перечисления.ТипыУпаковок.МультитоварнаяУпаковка;
			КоробОбъект.Номенклатура = Справочники.Номенклатура.ПустаяСсылка();
		ИначеЕсли ВложеннаяНоменклатура.Количество() = 1 Тогда
			КоробОбъект.Номенклатура = ВложеннаяНоменклатура[0].Номенклатура;
		Иначе
			КоробОбъект.Номенклатура = Справочники.Номенклатура.ПустаяСсылка();	
		КонецЕсли;	
		ДанныеДляВычисления = Справочники.ШтрихкодыУпаковокТоваров.ДанныеДляВычисленияХешСуммы(КоробОбъект);
		КоробОбъект.ХешСумма = Справочники.ШтрихкодыУпаковокТоваров.ХешСуммаСодержимогоУпаковки(ДанныеДляВычисления);
		КоробОбъект.Записать();
		НоваяСтрокаУпаковки = ЗагруженыеУпаковки.Добавить();
		НоваяСтрокаУпаковки.Ссылка = КоробОбъект.Ссылка;
		Для Каждого Строка ИЗ ВложеннаяНоменклатура Цикл
			НоваяСтрокаОбщая = ВложеннаяНоменклатураОбщая.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрокаОбщая,Строка);
		КонецЦикла;	
	КонецЦикла; 
	ВложеннаяНоменклатураОбщая.Свернуть("Номенклатура");
	Возврат ВложеннаяНоменклатураОбщая;
КонецФункции	

Процедура ЗаполнитьМаркиТТН(ДанныеЗаполнеияМарок)
	Для Каждого Марка ИЗ ДанныеЗаполнеияМарок.ЗагружаемыеМарки Цикл 
		СпрШК = Справочники.ШтрихкодыУпаковокТоваров;
		Отбор = Новый Структура("ЗначениеШтрихкода");
		Отбор.ЗначениеШтрихкода = Марка;
		Выборка = СпрШК.Выбрать(,,Отбор);
		Если Выборка.Следующий()  Тогда
			ШК = Выборка.ПолучитьОбъект();
		Иначе	
			ШК = Справочники.ШтрихкодыУпаковокТоваров.СоздатьЭлемент();
		КонецЕсли;
		Шк.ОбменДанными.Загрузка = Истина;
		ШК.ДатаУпаковки = ДанныеЗаполнеияМарок.ДатаУпаковки;
		ШК.ЗначениеШтрихкода = Марка;
		ШК.ТипУпаковки = Перечисления.ТипыУпаковок.МаркированныйТовар;
		Шк.ТипШтрихкода = Перечисления.ТипыШтрихкодов.PDF417;
		Шк.Номенклатура = ДанныеЗаполнеияМарок.Номенклатура;
		Если ДанныеЗаполнеияМарок.Свойство("Серия") Тогда
			Шк.Серия = ДанныеЗаполнеияМарок.Серия;	
		КонецЕсли;	
		Шк.Записать();
		НоваяСтрока = ДанныеЗаполнеияМарок.ТаблМарок.Добавить();
		НоваяСтрока.АкцизнаяМарка = Шк.Ссылка;
		НоваяСтрока.Справка2 = ДанныеЗаполнеияМарок.Справка2;
		НоваяСтрока.Количество = 1;
	КонецЦикла;
КонецПроцедуры	

Процедура ЗагрузитьПеремещение(ФайлАдрес) Экспорт 
	ИмяФайла = ПолучитьФайл(ФайлАдрес);
	Данные = ПрочитатьXDTO(ИмяФайла);
	ЗаполнитьТТНВходящую(Данные);	
КонецПроцедуры	

Процедура ЗаполнитьТТНВходящую(Данные)
	Док = "";
	Док = Данные.Document.WayBill_v3;
	Если Не ТипЗнч(Док) = Тип("СписокXDTO") Тогда
		ЗагружаемыеДокументы = Новый Массив;
		ЗагружаемыеДокументы.Добавить(Док);
	Иначе	
		ЗагружаемыеДокументы = Док;
	КонецЕсли;
	
	Для Каждого Документ Из ЗагружаемыеДокументы Цикл
		ЗаполнитьДокументТТНВходящая(Документ,Данные.Owner.FSRAR_ID);	
	КонецЦикла;  
КонецПроцедуры

Процедура ЗаполнитьДокументТТНВходящая(Документ,ИДВладельца)
	Отбор = Новый Структура("Идентификатор",Документ.Identity);
	Выборка = Документы.ТТНВходящаяЕГАИС.Выбрать(,,Отбор);
	Если Выборка.Следующий() Тогда
		ТекДок = Выборка.ПолучитьОбъект();
	Иначе
		ТекДок = Документы.ТТНВходящаяЕГАИС.СоздатьДокумент();
	КонецЕсли;
	ТекДок.Дата = XMLЗначение(Тип("Дата"),Документ.Header.Date);
	ТекДок.ВидОперации = Перечисления.ВидыОперацийТТНВходящейЕГАИС.ПриходнаяНакладная;
	Производитель = Справочники.КлассификаторОрганизацийЕГАИС.НайтиПоКоду(ИДВладельца);
	ТекДок.Организация = Производитель.Контрагент;
	ТекДок.ТорговыйОбъект = Производитель.ТорговыйОбъект;
	ТекДок.Идентификатор =  Документ.Identity;
	ТекДок.ДатаРегистрацииДвижений = XMLЗначение(Тип("Дата"),Документ.Header.Date);
	ТекДок.ДатаОтгрузки = XMLЗначение(Тип("Дата"),Документ.Header.Date);
	ТекДок.НомерТТН = "Перем-" + Документ.Header.NUMBER;
	ТекДок.ДатаТТН = XMLЗначение(Тип("Дата"),Документ.Header.ShippingDate);
	ТекДок.Упакована = Ложь;
	ТекДок.ЕстьРасхождения = Ложь;
	ТекДок.Грузополучатель = Производитель;
	ТекДок.Грузоотправитель =  Справочники.КлассификаторОрганизацийЕГАИС.НайтиПоКоду(Документ.Header.Shipper.UL.ClientRegId);
	ТекДок.ФорматОбмена = Перечисления.ФорматыОбменаЕГАИС.V3;
	ТекДок.СтатусПроверкиИПодбора = Перечисления.СтатусыПроверкиИПодбораЕГАИС.Завершено;
	Если Не ТипЗнч(Документ.Content.Position) = Тип("СписокXDTO") Тогда
		ТабличнаяЧастьПроизводство = Новый Массив;
		ТабличнаяЧастьПроизводство.Добавить(Документ.Content.Position);
	Иначе	
		ТабличнаяЧастьПроизводство = Документ.Content.Position;
	КонецЕсли;
	ЗаполнитьТабличнуюЧастьТТВходящей(ТабличнаяЧастьПроизводство,ТекДок);
	ТекДок.Записать(РежимЗаписиДокумента.Запись);
	ЗаполнитьСтатусДокументаПринят(ТекДок.Ссылка);
	ТекДок.Записать(РежимЗаписиДокумента.Проведение); 
	
	Сообщить("Перемещение загружено.");
	
	Попытка
		УдалитьФайлы(ПутьКПапкеОбмена + "\perem.xml");
	Исключение
		Сообщить(ОписаниеОшибки());
	КонецПопытки;
	
	//Запись в журнал 
	ЗаписьУжеЕсть = Ложь; 
	Для Каждого Товар Из ТекДок.Товары Цикл
		ЗаписьУжеЕсть = ПроверкаЖурнала(Товар.АлкогольнаяПродукция, Товар.Справка2); 	
		Если Не ЗаписьУжеЕсть Тогда
			НоваяЗапись = Документы.ПоказателиАП.СоздатьДокумент();
			НоваяЗапись.АП = Товар.АлкогольнаяПродукция;
			НоваяЗапись.Справка2 = Товар.Справка2;
			НоваяЗапись.ДатаРозлива = Товар.Справка2.Справка1.ДатаРозлива;
			НоваяЗапись.Дата = ТекущаяДата();
			НоваяЗапись.Записать(РежимЗаписиДокумента.Проведение);
		КонецЕсли;
	КонецЦикла;	
КонецПроцедуры

Процедура ЗаполнитьТабличнуюЧастьТТВходящей(ТабличнаяЧастьПроизводство,ТекДок)
	ТекДок.Товары.Очистить();
	ТекДок.АкцизныеМарки.Очистить();
	Для Каждого Строка Из ТабличнаяЧастьПроизводство Цикл
		НоваяСтрока = ТекДок.Товары.Добавить();
		ЗаполнитьСтрокуТТН(НоваяСтрока,Строка,ТекДок);
	КонецЦикла;
	ЗаполнитьРезультатыПроверки(ТекДок);  	
КонецПроцедуры


Процедура ЗаполнитьСтрокуТТН(НоваяСтрока,Строка,ТекДок)
	НайденнаяСсылка = Справочники.КлассификаторАлкогольнойПродукцииЕГАИС.НайтиПоКоду(Строка.Product.AlcCode);
	Если НайденнаяСсылка = Справочники.КлассификаторАлкогольнойПродукцииЕГАИС.ПустаяСсылка() Тогда
		ТекЭлемент = Справочники.КлассификаторАлкогольнойПродукцииЕГАИС.СоздатьЭлемент();
		Сообщить("Отсутствует АП с кодом " +  Строка.ProductCode,СтатусСообщения.Важное);
		ТекЭлемент.Код = Строка.ProductCode;
		ТекЭлемент.Записать();
		НоменклатураАП = ТекЭлемент.Ссылка;
	Иначе
		НоменклатураАП = НайденнаяСсылка;
	КонецЕсли;	
	НоваяСтрока.АлкогольнаяПродукция = НоменклатураАП;
	ЗаполнитьНоменклатуруПоАПВСТроке(НоваяСтрока);
	НоваяСтрока.Количество = Число(Строка.Quantity);
	НоваяСтрока.КоличествоФакт = Число(Строка.Quantity);
	НоваяСтрока.Цена = Число(Строка.Price);
	НоваяСтрока.Сумма = Число(Строка.Price)*Число(Строка.Quantity);
	Если Строка.Свойства().Получить("Party") <> Неопределено Тогда
		НоваяСтрока.НомерПартии = Строка.Party;
	Иначе
		НоваяСтрока.НомерПартии = "";
	КонецЕсли;
	НоваяСтрока.ИдентификаторСтроки = Строка.Identity;
	ЗаполнитьСправку2ВСтрокеТТН(НоваяСтрока,Строка,ТекДок);
	Если Строка.Свойства().Получить("MarkInfo") <> Неопределено Тогда
		Если Не ТипЗнч(Строка.MarkInfo.amc) = Тип("СписокXDTO") Тогда
			ЗагружаемыеМарки = Новый Массив;
			ЗагружаемыеМарки.Добавить(Строка.MarkInfo.amc);
		Иначе	
			ЗагружаемыеМарки = Строка.MarkInfo.amc;
		КонецЕсли;
	    ДанныеЗаполнеияМарок = Новый Структура;
		ДанныеЗаполнеияМарок.Вставить("ЗагружаемыеМарки",ЗагружаемыеМарки);
		ДанныеЗаполнеияМарок.Вставить("Справка2",НоваяСтрока.Справка2);
		ДанныеЗаполнеияМарок.Вставить("Номенклатура",НоваяСтрока.Номенклатура);
		ДанныеЗаполнеияМарок.Вставить("ТаблМарок",ТекДок.АкцизныеМарки);
		ДанныеЗаполнеияМарок.Вставить("ДатаУпаковки",ТекДок.ДатаОтгрузки);
		ЗаполнитьМаркиТТН(ДанныеЗаполнеияМарок);
	ИначеЕсли Строка.InformF2.Свойства().Получить("MarkInfo") <> Неопределено Тогда
		Если Не ТипЗнч(Строка.InformF2.MarkInfo.boxpos.amclist.amc) = Тип("СписокXDTO") Тогда
			ЗагружаемыеМарки = Новый Массив;
			ЗагружаемыеМарки.Добавить(Строка.InformF2.MarkInfo.boxpos.amclist.amc);
		Иначе	
			ЗагружаемыеМарки = Строка.InformF2.MarkInfo.boxpos.amclist.amc;
		КонецЕсли;
	    ДанныеЗаполнеияМарок = Новый Структура;
		ДанныеЗаполнеияМарок.Вставить("ЗагружаемыеМарки",ЗагружаемыеМарки);
		ДанныеЗаполнеияМарок.Вставить("Справка2",НоваяСтрока.Справка2);
		ДанныеЗаполнеияМарок.Вставить("Номенклатура",НоваяСтрока.Номенклатура);
		ДанныеЗаполнеияМарок.Вставить("ТаблМарок",ТекДок.АкцизныеМарки);
		ДанныеЗаполнеияМарок.Вставить("ДатаУпаковки",ТекДок.ДатаОтгрузки);
		ЗаполнитьМаркиТТН(ДанныеЗаполнеияМарок);
	КонецЕсли;
КонецПроцедуры

Функция РазобратьДату(ИзмДата)
	Возврат Дата(Сред(ИзмДата,7,4)+Сред(ИзмДата,4,2)+Сред(ИзмДата,0,2));	       	
КонецФункции 

Процедура ЗаполнитьСправку2ВСтрокеТТН(НоваяСтрока,Строка,ТекДок)
	Если ВРег(Лев(НоваяСтрока.НомерПартии,4)) = "БЕЗ " Тогда
		ЭксПрод = Истина;
		ДатаРозлива = ТекДок.ДатаТТН;
	ИначеЕсли СТрока.Свойства().Получить("BottlingDate") <> Неопределено Тогда
		ЭксПрод = Ложь;
		ДатаРозлива = xmlЗначение(тип("дата"),Строка.BottlingDate);
	Иначе
		ЭксПрод = Ложь;
		Если ЗначениеЗаполнено(Строка.Party) Тогда
			ДатаРозлива = РазобратьДату(Строка.Party);
		Иначе
			ДатаРозлива = ТекДок.ДатаТТН;
		КонецЕсли;
	КонецЕсли;	
	
	Справка1 = ПолучитьИЗаполнитьСправку1(Строка.FARegId,ДатаРозлива,НоваяСтрока.АлкогольнаяПродукция);
	НоваяСтрока.Справка2 = ПолучитьИЗаполнитьСправку2(Строка.InformF2.F2RegIdAssigned,Справка1,НоваяСтрока.АлкогольнаяПродукция,ТекДок,Строка,НоваяСтрока.Количество,ЭксПрод);
	НоваяСтрока.НомерСправки2Поставщика = НоваяСтрока.Справка2.РегистрационныйНомер;
КонецПроцедуры

Процедура ЗагрузитьАктПостановки(ФайлАдрес) Экспорт 
	ИмяФайла = ПолучитьФайл(ФайлАдрес);
	Данные = ПрочитатьXDTO(ИмяФайла);
	ЗаполнитьАктПостановки(Данные);	
КонецПроцедуры	

Процедура ЗаполнитьАктПостановки(Данные)
	Док = "";
	Док = Данные.Document.ActChargeOn_v2;
	Если Не ТипЗнч(Док) = Тип("СписокXDTO") Тогда
		ЗагружаемыеДокументы = Новый Массив;
		ЗагружаемыеДокументы.Добавить(Док);
	Иначе	
		ЗагружаемыеДокументы = Док;
	КонецЕсли;
	
	Для Каждого Документ Из ЗагружаемыеДокументы Цикл
		ЗаполнитьДокументАктПостановки(Документ,Данные.Owner.FSRAR_ID);	
	КонецЦикла;  
КонецПроцедуры

Процедура ЗаполнитьДокументАктПостановки(Документ,ИДВладельца)
	Отбор = Новый Структура("Идентификатор",Документ.Identity);
	Выборка = Документы.АктПостановкиНаБалансЕГАИС.Выбрать(,,Отбор);
	Если Выборка.Следующий() Тогда
		ТекДок = Выборка.ПолучитьОбъект();
	Иначе
		ТекДок = Документы.АктПостановкиНаБалансЕГАИС.СоздатьДокумент();
	КонецЕсли;
	ТекДок.Дата = XMLЗначение(Тип("Дата"),Документ.Header.ActDate);
	ТекДок.ВидДокумента = Перечисления.ВидыДокументовЕГАИС.АктПостановкиНаБалансВРегистр1;
	ТекДок.ПричинаПостановкиНаБаланс = Перечисления.ПричиныПостановкиНаБалансЕГАИС.Излишки;
	Производитель = Справочники.КлассификаторОрганизацийЕГАИС.НайтиПоКоду(ИДВладельца);
	ТекДок.ОрганизацияЕГАИС = Производитель;
	ТекДок.Идентификатор =  Документ.Identity;
	ТекДок.ДатаРегистрацииДвижений = XMLЗначение(Тип("Дата"),Документ.Header.ActDate);
	//ТекДок.ДатаОтгрузки = XMLЗначение(Тип("Дата"),Документ.Header.ActDate);
	ТекДок.Номер = Документ.Header.NUMBER;
	ТекДок.Дата = XMLЗначение(Тип("Дата"),Документ.Header.ActDate);
	//ТекДок.Упакована = Ложь;
	//ТекДок.ЕстьРасхождения = Ложь;
	//ТекДок.Грузополучатель = Производитель;
	//ТекДок.Грузоотправитель =  Производитель;
	//ТекДок.ФорматОбмена = Перечисления.ФорматыОбменаЕГАИС.V3;
	ТекДок.СтатусПроверкиИПодбора = Перечисления.СтатусыПроверкиИПодбораЕГАИС.Завершено;
	Если Не ТипЗнч(Документ.Content.Position) = Тип("СписокXDTO") Тогда
		ТабличнаяЧастьПроизводство = Новый Массив;
		ТабличнаяЧастьПроизводство.Добавить(Документ.Content.Position);
	Иначе	
		ТабличнаяЧастьПроизводство = Документ.Content.Position;
	КонецЕсли;
	ЗаполнитьТабличнуюЧастьАктаПостановки(ТабличнаяЧастьПроизводство,ТекДок, Документ);
	ТекДок.Записать(РежимЗаписиДокумента.Запись);
	ЗаполнитьСтатусДокументаПринят(ТекДок.Ссылка);
	ТекДок.Записать(РежимЗаписиДокумента.Проведение);
	ЗаполнитьСтатусыМарок(ТекДок.Ссылка,Перечисления.СтатусыАкцизныхМарок.ВНаличии);
	
	Сообщить("Акт постановки на баланс загружен.");
	
	Попытка
		УдалитьФайлы(ПутьКПапкеОбмена + "\post.xml");
	Исключение
		Сообщить(ОписаниеОшибки());
	КонецПопытки;
	
	//Запись в журнал 
	ЗаписьУжеЕсть = Ложь; 
	Для Каждого Товар Из ТекДок.Товары Цикл
		ЗаписьУжеЕсть = ПроверкаЖурнала(Товар.АлкогольнаяПродукция, Товар.Справка2); 	
		Если Не ЗаписьУжеЕсть Тогда
			НоваяЗапись = Документы.ПоказателиАП.СоздатьДокумент();
			НоваяЗапись.АП = Товар.АлкогольнаяПродукция;
			НоваяЗапись.Справка2 = Товар.Справка2;
			НоваяЗапись.ДатаРозлива = Товар.Справка2.Справка1.ДатаРозлива;
			НоваяЗапись.Дата = ТекущаяДата();
			НоваяЗапись.Записать(РежимЗаписиДокумента.Проведение);
		КонецЕсли;
	КонецЦикла;	
КонецПроцедуры

Процедура ЗаполнитьСтатусыМарок(Основание,Статус)
	Для каждого Строка Из Основание.АкцизныеМарки Цикл
		МенеджерЗаписи = РегистрыСведений.АкцизныеМаркиЕГАИС.СоздатьМенеджерЗаписи();
		ЗаполнитьЗначенияСвойств(МенеджерЗаписи,Строка);
		МенеджерЗаписи.ОрганизацияЕГАИС = Основание.ОрганизацияЕГАИС;
		МенеджерЗаписи.Статус = Статус;
		МенеджерЗаписи.АлкогольнаяПродукция = Строка.Справка2.АлкогольнаяПродукция; 
		МенеджерЗаписи.Основание = Основание;
		МенеджерЗаписи.Записать();
	КонецЦикла;
КонецПроцедуры	

Процедура ЗаполнитьТабличнуюЧастьАктаПостановки(ТабличнаяЧастьПроизводство,ТекДок, Документ)
	ТекДок.Товары.Очистить();
	ТекДок.АкцизныеМарки.Очистить();
	Для Каждого Строка Из ТабличнаяЧастьПроизводство Цикл
		НоваяСтрока = ТекДок.Товары.Добавить();
		ЗаполнитьСтрокуАктаПостановки(НоваяСтрока,Строка,ТекДок, Документ);
	КонецЦикла;
	ЗаполнитьРезультатыПроверки(ТекДок);  	
КонецПроцедуры


Процедура ЗаполнитьСтрокуАктаПостановки(НоваяСтрока,Строка,ТекДок, Документ)
	НайденнаяСсылка = Справочники.КлассификаторАлкогольнойПродукцииЕГАИС.НайтиПоКоду(Строка.Product.AlcCode);
	Если НайденнаяСсылка = Справочники.КлассификаторАлкогольнойПродукцииЕГАИС.ПустаяСсылка() Тогда
		ТекЭлемент = Справочники.КлассификаторАлкогольнойПродукцииЕГАИС.СоздатьЭлемент();
		Сообщить("Отсутствует АП с кодом " +  Строка.ProductCode,СтатусСообщения.Важное);
		ТекЭлемент.Код = Строка.ProductCode;
		ТекЭлемент.Записать();
		НоменклатураАП = ТекЭлемент.Ссылка;
	Иначе
		НоменклатураАП = НайденнаяСсылка;
	КонецЕсли;	
	НоваяСтрока.АлкогольнаяПродукция = НоменклатураАП;
	ЗаполнитьНоменклатуруПоАПВСТроке(НоваяСтрока);
	НоваяСтрока.Количество = Число(Строка.Quantity);
	НоваяСтрока.КоличествоПоСправке1 = Число(Строка.Quantity);
	НоваяСтрока.КоличествоУпаковок = Число(Строка.Quantity);
	НоваяСтрока.ДатаПодтвержденияЕГАИС = Документ.Header.ActDate;
	НоваяСтрока.ДатаТТН = XMLЗначение(Тип("Дата"),Документ.Content.Position.InformF1F2.InformF1F2Reg.InformF1.TTNDate);
	НоваяСтрока.ДатаРозлива = XMLЗначение(Тип("Дата"),Строка.InformF1F2.InformF1F2Reg.InformF1.BottlingDate);
	НоваяСтрока.НомерПодтвержденияЕГАИС = Строка.InformF1F2.InformF1F2Reg.InformF1.EGAISFixNumber;
	НоваяСтрока.ДатаПодтвержденияЕГАИС = XMLЗначение(Тип("Дата"),Строка.InformF1F2.InformF1F2Reg.InformF1.EGAISFixDate);
	НоваяСтрока.НомерТТН = Документ.Content.Position.InformF1F2.InformF1F2Reg.InformF1.TTNNumber;
	НоваяСтрока.СтатусУказанияСерий = 21;
	НоваяСтрока.Номенклатура = Справочники.Номенклатура.НайтиПоРеквизиту("Артикул",Строка.Product.AlcCode);
	ЗаполнитьСправку2ВСтрокеАкта(НоваяСтрока,Строка,ТекДок);
	
	ЗаполнитьСерию(НоваяСтрока,Строка,ТекДок); 
	
	НоваяСтрока.ИдентификаторСтроки = Строка.Identity;
	
	Если Строка.Свойства().Получить("MarkInfo") <> Неопределено Тогда
		Если Не ТипЗнч(Строка.MarkInfo.amc) = Тип("СписокXDTO") Тогда
			ЗагружаемыеМарки = Новый Массив;
			ЗагружаемыеМарки.Добавить(Строка.MarkInfo.amc);
		Иначе	
			ЗагружаемыеМарки = Строка.MarkInfo.amc;
		КонецЕсли;
	    ДанныеЗаполнеияМарок = Новый Структура;
		ДанныеЗаполнеияМарок.Вставить("ЗагружаемыеМарки",ЗагружаемыеМарки);
		ДанныеЗаполнеияМарок.Вставить("Справка2",НоваяСтрока.Справка2);
		ДанныеЗаполнеияМарок.Вставить("Серия",НоваяСтрока.Серия);
		ДанныеЗаполнеияМарок.Вставить("Номенклатура",НоваяСтрока.Номенклатура);
		ДанныеЗаполнеияМарок.Вставить("ТаблМарок",ТекДок.АкцизныеМарки);
		ДанныеЗаполнеияМарок.Вставить("ДатаУпаковки",ТекДок.ДатаОтгрузки);
		ЗаполнитьМаркиТТН(ДанныеЗаполнеияМарок);
	ИначеЕсли Строка.Свойства().Получить("MarkCodeInfo") <> Неопределено Тогда
		Если Не ТипЗнч(Строка.MarkCodeInfo.MarkCode) = Тип("СписокXDTO") Тогда
			ЗагружаемыеМарки = Новый Массив;
			ЗагружаемыеМарки.Добавить(Строка.MarkCodeInfo.MarkCode);
		Иначе	
			ЗагружаемыеМарки = Строка.MarkCodeInfo.MarkCode;
		КонецЕсли;
	    ДанныеЗаполнеияМарок = Новый Структура;
		ДанныеЗаполнеияМарок.Вставить("ЗагружаемыеМарки",ЗагружаемыеМарки);
		ДанныеЗаполнеияМарок.Вставить("Справка2",НоваяСтрока.Справка2);
		ДанныеЗаполнеияМарок.Вставить("Серия",НоваяСтрока.Серия);
		ДанныеЗаполнеияМарок.Вставить("Номенклатура",НоваяСтрока.Номенклатура);
		ДанныеЗаполнеияМарок.Вставить("ТаблМарок",ТекДок.АкцизныеМарки);
		ДанныеЗаполнеияМарок.Вставить("ДатаУпаковки",ТекДок.Дата);
		ЗаполнитьМаркиТТН(ДанныеЗаполнеияМарок);
	КонецЕсли;
	
КонецПроцедуры

Процедура ЗаполнитьСправку2ВСтрокеАкта(НоваяСтрока,Строка,ТекДок)
	
	ДатаРозлива = XMLЗначение(Тип("Дата"),Строка.InformF1F2.InformF1F2Reg.InformF1.BottlingDate);  	
	
	Справка1 = ПолучитьИЗаполнитьСправку1(Строка.FormOneRegId,ДатаРозлива,НоваяСтрока.АлкогольнаяПродукция);
	НоваяСтрока.Справка2 = ПолучитьИЗаполнитьСправку2(Строка.FormTwoRegId,Справка1,НоваяСтрока.АлкогольнаяПродукция,ТекДок,Строка,НоваяСтрока.Количество);
	
КонецПроцедуры

Процедура ЗаполнитьСерию(НоваяСтрока,Строка,ТекДок)
	
	ВидНоменклатуры = Справочники.ВидыНоменклатуры.НайтиПоНаименованию("Алкоголь собственного производства");
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ ПЕРВЫЕ 1
		|	СерииНоменклатуры.Ссылка КАК Ссылка
		|ИЗ
		|	Справочник.СерииНоменклатуры КАК СерииНоменклатуры
		|ГДЕ
		|	СерииНоменклатуры.ВидНоменклатуры = &ВидНоменклатуры
		|	И СерииНоменклатуры.ДатаПроизводства = &ДатаПроизводства
		|	И СерииНоменклатуры.Справка2ЕГАИС = &Справка2ЕГАИС";
	
	Запрос.УстановитьПараметр("ВидНоменклатуры", ВидНоменклатуры);
	Запрос.УстановитьПараметр("ДатаПроизводства", НоваяСтрока.ДатаРозлива);
	Запрос.УстановитьПараметр("Справка2ЕГАИС", НоваяСтрока.Справка2);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	
	Если ВыборкаДетальныеЗаписи.Следующий() Тогда
		Серия = ВыборкаДетальныеЗаписи.Ссылка;
	Иначе	
		ТекСерия = Справочники.СерииНоменклатуры.СоздатьЭлемент();
		ТекСерия.ВидНоменклатуры = ВидНоменклатуры;
		ТекСерия.ДатаПроизводства = НоваяСтрока.ДатаРозлива;
		ТекСерия.Справка2ЕГАИС = НоваяСтрока.Справка2;
		ТекСерия.Наименование = "от " + Формат(НоваяСтрока.ДатаРозлива,"ДФ=dd.MM.yy") + " " + НоваяСтрока.Справка2.РегистрационныйНомер;
		ТекСерия.Записать();
		Серия = ТекСерия.Ссылка;
	КонецЕсли;
	НоваяСтрока.Серия = Серия;
	
	//НоваяСерия = Справочники.СерииНоменклатуры.СоздатьЭлемент();
	//ТЗ = Новый ТаблицаЗначений;
	//ТЗ.Колонки.Добавить("ВидНоменклатуры");
	//ТЗ.Колонки.Добавить("ГоденДо");
	//ТЗ.Колонки.Добавить("ИспользоватьДатуПроизводстваСерии");
	//ТЗ.Колонки.Добавить("ИспользоватьПроизводителяЕГАИССерии");
	//ТЗ.Колонки.Добавить("ИспользоватьСправку2ЕГАИССерии");
	//ТЗ.Колонки.Добавить("ИспользоватьСрокГодностиСерии");
	//ТЗ.Колонки.Добавить("Производитель");
	//ТЗ.Колонки.Добавить("Серия");
	//ТЗ.Колонки.Добавить("Справка1ДатаРозлива");	
	//ТЗ.Колонки.Добавить("Справка2");

	//Стр = ТЗ.Добавить();
	//Стр.ВидНоменклатуры = Справочники.ВидыНоменклатуры.НайтиПоНаименованию("Алкоголь собственного производства");
	//Стр.ГоденДо = Дата(1, 1, 1);
	//Стр.ИспользоватьДатуПроизводстваСерии = Истина;
	//Стр.ИспользоватьПроизводителяЕГАИССерии = Ложь;
	//Стр.ИспользоватьСправку2ЕГАИССерии = Истина;
	//Стр.ИспользоватьСрокГодностиСерии = Ложь;	
	//Стр.Производитель = ТекДок.ОрганизацияЕГАИС;	
	//Стр.Серия = Справочники.СерииНоменклатуры.ПустаяСсылка();
	//Стр.Справка1ДатаРозлива = НоваяСтрока.ДатаРозлива;
	//Стр.Справка2 = НоваяСтрока.Справка2;

	//Для Каждого Строка Из ТЗ Цикл
	//	НоваяСерия.Заполнить(Строка);
	//КонецЦикла;
	//Серия.Справка2ЕГАИС = НоваяСтрока.Справка2;
	//Серия.ДатаПроизводства = НоваяСтрока.ДатаРозлива;
	//
	//Серия.ВидНоменклатуры = Справочники.ВидыНоменклатуры.НайтиПоНаименованию("Алкоголь собственного производства");
	
	//Серия.РегистрационныйНомер = НомерСправки1;
	//Серия.ДатаРозлива = ДатаРозлива;
	//НоваяСерия.Записать();
	//НоваяСтрока.Серия = НоваяСерия;
	
	
КонецПроцедуры

